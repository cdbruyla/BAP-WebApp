{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { trace } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\n\nexport class InteractiveBrowserCredential {\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(options) {\n    if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n      const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const browserOptions = options;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions = Object.assign(Object.assign({}, options), {\n      logger,\n      loginStyle: loginStyle,\n      redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri\n    });\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n\n\n  getToken(scopes, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return trace(`${_this.constructor.name}.getToken`, options, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (newOptions) {\n          const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n          return _this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n            disableAutomaticAuthentication: _this.disableAutomaticAuthentication\n          }));\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n\n\n  authenticate(scopes, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return trace(`${_this2.constructor.name}.authenticate`, options, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (newOptions) {\n          const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n          yield _this2.msalFlow.getToken(arrayScopes, newOptions);\n          return _this2.msalFlow.getActiveAccount();\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n} //# sourceMappingURL=interactiveBrowserCredential.browser.js.map","map":null,"metadata":{},"sourceType":"module"}