{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Sanitizer } from \"../util/sanitizer\";\nimport { logger as coreLogger } from \"../log\";\n/**\n * Creates a policy that logs information about the outgoing request and the incoming responses.\n * @param loggingOptions - Logging options.\n * @returns An instance of the {@link LogPolicy}\n */\n\nexport function logPolicy(loggingOptions = {}) {\n  return {\n    create: (nextPolicy, options) => {\n      return new LogPolicy(nextPolicy, options, loggingOptions);\n    }\n  };\n}\n/**\n * A policy that logs information about the outgoing request and the incoming responses.\n */\n\nexport class LogPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, {\n    logger = coreLogger.info,\n    allowedHeaderNames = [],\n    allowedQueryParameters = []\n  } = {}) {\n    super(nextPolicy, options);\n    this.logger = logger;\n    this.sanitizer = new Sanitizer({\n      allowedHeaderNames,\n      allowedQueryParameters\n    });\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  get allowedHeaderNames() {\n    return this.sanitizer.allowedHeaderNames;\n  }\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  set allowedHeaderNames(allowedHeaderNames) {\n    this.sanitizer.allowedHeaderNames = allowedHeaderNames;\n  }\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  get allowedQueryParameters() {\n    return this.sanitizer.allowedQueryParameters;\n  }\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   * @deprecated Pass these into the constructor instead.\n   */\n\n\n  set allowedQueryParameters(allowedQueryParameters) {\n    this.sanitizer.allowedQueryParameters = allowedQueryParameters;\n  }\n\n  sendRequest(request) {\n    if (!this.logger.enabled) return this._nextPolicy.sendRequest(request);\n    this.logRequest(request);\n    return this._nextPolicy.sendRequest(request).then(response => this.logResponse(response));\n  }\n\n  logRequest(request) {\n    this.logger(`Request: ${this.sanitizer.sanitize(request)}`);\n  }\n\n  logResponse(response) {\n    this.logger(`Response status code: ${response.status}`);\n    this.logger(`Headers: ${this.sanitizer.sanitize(response.headers)}`);\n    return response;\n  }\n\n} //# sourceMappingURL=logPolicy.js.map","map":null,"metadata":{},"sourceType":"module"}