{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { delay } from \"../util/delay\";\nexport function rpRegistrationPolicy(retryTimeout = 30) {\n  return {\n    create: (nextPolicy, options) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, _retryTimeout = 30) {\n    super(nextPolicy, options);\n    this._retryTimeout = _retryTimeout;\n  }\n\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => registerIfNeeded(this, request, response));\n  }\n\n}\n\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText);\n\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request) // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(() => false).then(registrationStatus => {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n\n        return response;\n      });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\n\n\nfunction getRequestEssentials(originalRequest, reuseUrlToo = false) {\n  const reqOptions = originalRequest.clone();\n\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  } // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n\n\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid()); // Set content-type to application/json\n\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\n\n\nfunction checkRPNotRegisteredError(body) {\n  let result, responseBody;\n\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {// do nothing;\n    }\n\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\n\n\nfunction extractSubscriptionUrl(url) {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\n\n\nfunction registerRP(_x, _x2, _x3, _x4) {\n  return _registerRP.apply(this, arguments);\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\n\n\nfunction _registerRP() {\n  _registerRP = _asyncToGenerator(function* (policy, urlPrefix, provider, originalRequest) {\n    const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n    const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n    const reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.method = \"POST\";\n    reqOptions.url = postUrl;\n    const response = yield policy._nextPolicy.sendRequest(reqOptions);\n\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n  return _registerRP.apply(this, arguments);\n}\n\nfunction getRegistrationStatus(_x5, _x6, _x7) {\n  return _getRegistrationStatus.apply(this, arguments);\n} //# sourceMappingURL=rpRegistrationPolicy.js.map\n\n\nfunction _getRegistrationStatus() {\n  _getRegistrationStatus = _asyncToGenerator(function* (policy, url, originalRequest) {\n    const reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.url = url;\n    reqOptions.method = \"GET\";\n    const res = yield policy._nextPolicy.sendRequest(reqOptions);\n    const obj = res.parsedBody;\n\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      yield delay(policy._retryTimeout * 1000);\n      return getRegistrationStatus(policy, url, originalRequest);\n    }\n  });\n  return _getRegistrationStatus.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}