{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { log } from \"./log\";\nconst debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj = Object.assign(namespace => {\n  return createDebugger(namespace);\n}, {\n  enable,\n  enabled,\n  disable,\n  log\n});\n\nfunction enable(namespaces) {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map(ns => ns.trim().replace(wildcard, \".*?\"));\n\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace) {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction disable() {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace) {\n  const newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend\n  });\n\n  function debug(...args) {\n    if (!newDebugger.enabled) {\n      return;\n    }\n\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\n\nfunction destroy() {\n  const index = debuggers.indexOf(this);\n\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(namespace) {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj; //# sourceMappingURL=debug.js.map","map":null,"metadata":{},"sourceType":"module"}