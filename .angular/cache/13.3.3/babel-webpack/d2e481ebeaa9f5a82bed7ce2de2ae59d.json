{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __asyncValues } from \"tslib\";\nimport { BlobServiceClient } from '@azure/storage-blob';\nimport * as i0 from \"@angular/core\";\nexport class BlobInService {\n  constructor() {\n    this.storageAccount = \"storagebap\";\n    this.storageContainer = \"bap-storage-container\";\n  }\n\n  listBlobs() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var e_1, _a;\n\n      let map = new Map();\n\n      let blobs = _this.containerClient().listBlobsFlat();\n\n      let current_elID = \"\";\n      let currentArray = new Array();\n\n      try {\n        for (var blobs_1 = __asyncValues(blobs), blobs_1_1; blobs_1_1 = yield blobs_1.next(), !blobs_1_1.done;) {\n          const blob = blobs_1_1.value;\n          let elID = blob.name.split(\"/\");\n\n          if (!(current_elID === elID[0])) {\n            map.set(current_elID, currentArray);\n            currentArray = new Array();\n          }\n\n          if (!map.has(elID[0])) {\n            current_elID = elID[0];\n          }\n\n          currentArray.push(elID[1].replace(\".json\", \"\"));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1.return)) yield _a.call(blobs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return map;\n    })();\n  }\n\n  containerClient() {\n    return new BlobServiceClient(`https://${this.storageAccount}.blob.core.windows.net?`).getContainerClient(this.storageContainer);\n  }\n\n}\n\nBlobInService.ɵfac = function BlobInService_Factory(t) {\n  return new (t || BlobInService)();\n};\n\nBlobInService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlobInService,\n  factory: BlobInService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/src/app/blob-in.service.ts"],"names":["__asyncValues","BlobServiceClient","i0","BlobInService","constructor","storageAccount","storageContainer","listBlobs","e_1","_a","map","Map","blobs","containerClient","listBlobsFlat","current_elID","currentArray","Array","blobs_1","blobs_1_1","next","done","blob","value","elID","name","split","set","has","push","replace","e_1_1","error","return","call","getContainerClient","ɵfac","BlobInService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,GAAG;AACV,SAAKC,cAAL,GAAsB,YAAtB;AACA,SAAKC,gBAAL,GAAwB,uBAAxB;AACH;;AACKC,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,UAAIC,GAAJ,EAASC,EAAT;;AACA,UAAIC,GAAG,GAAG,IAAIC,GAAJ,EAAV;;AACA,UAAIC,KAAK,GAAG,KAAI,CAACC,eAAL,GAAuBC,aAAvB,EAAZ;;AACA,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,YAAY,GAAG,IAAIC,KAAJ,EAAnB;;AACA,UAAI;AACA,aAAK,IAAIC,OAAO,GAAGlB,aAAa,CAACY,KAAD,CAA3B,EAAoCO,SAAzC,EAAoDA,SAAS,SAASD,OAAO,CAACE,IAAR,EAAlB,EAAkC,CAACD,SAAS,CAACE,IAAjG,GAAwG;AACpG,gBAAMC,IAAI,GAAGH,SAAS,CAACI,KAAvB;AACA,cAAIC,IAAI,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAX;;AACA,cAAI,EAAEX,YAAY,KAAKS,IAAI,CAAC,CAAD,CAAvB,CAAJ,EAAiC;AAC7Bd,YAAAA,GAAG,CAACiB,GAAJ,CAAQZ,YAAR,EAAsBC,YAAtB;AACAA,YAAAA,YAAY,GAAG,IAAIC,KAAJ,EAAf;AACH;;AACD,cAAI,CAACP,GAAG,CAACkB,GAAJ,CAAQJ,IAAI,CAAC,CAAD,CAAZ,CAAL,EAAuB;AACnBT,YAAAA,YAAY,GAAGS,IAAI,CAAC,CAAD,CAAnB;AACH;;AACDR,UAAAA,YAAY,CAACa,IAAb,CAAkBL,IAAI,CAAC,CAAD,CAAJ,CAAQM,OAAR,CAAgB,OAAhB,EAAyB,EAAzB,CAAlB;AACH;AACJ,OAbD,CAcA,OAAOC,KAAP,EAAc;AAAEvB,QAAAA,GAAG,GAAG;AAAEwB,UAAAA,KAAK,EAAED;AAAT,SAAN;AAAyB,OAdzC,SAeQ;AACJ,YAAI;AACA,cAAIZ,SAAS,IAAI,CAACA,SAAS,CAACE,IAAxB,KAAiCZ,EAAE,GAAGS,OAAO,CAACe,MAA9C,CAAJ,EAA2D,MAAMxB,EAAE,CAACyB,IAAH,CAAQhB,OAAR,CAAN;AAC9D,SAFD,SAGQ;AAAE,cAAIV,GAAJ,EAAS,MAAMA,GAAG,CAACwB,KAAV;AAAkB;AACxC;;AACD,aAAOtB,GAAP;AA3Bc;AA4BjB;;AACDG,EAAAA,eAAe,GAAG;AACd,WAAO,IAAIZ,iBAAJ,CAAuB,WAAU,KAAKI,cAAe,yBAArD,EACF8B,kBADE,CACiB,KAAK7B,gBADtB,CAAP;AAEH;;AArCsB;;AAuC3BH,aAAa,CAACiC,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAInC,aAAV,GAAP;AAAoC,CAA7F;;AACAA,aAAa,CAACoC,KAAd,GAAsB,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtC,aAAT;AAAwBuC,EAAAA,OAAO,EAAEvC,aAAa,CAACiC,IAA/C;AAAqDO,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { __asyncValues } from \"tslib\";\r\nimport { BlobServiceClient } from '@azure/storage-blob';\r\nimport * as i0 from \"@angular/core\";\r\nexport class BlobInService {\r\n    constructor() {\r\n        this.storageAccount = \"storagebap\";\r\n        this.storageContainer = \"bap-storage-container\";\r\n    }\r\n    async listBlobs() {\r\n        var e_1, _a;\r\n        let map = new Map();\r\n        let blobs = this.containerClient().listBlobsFlat();\r\n        let current_elID = \"\";\r\n        let currentArray = new Array();\r\n        try {\r\n            for (var blobs_1 = __asyncValues(blobs), blobs_1_1; blobs_1_1 = await blobs_1.next(), !blobs_1_1.done;) {\r\n                const blob = blobs_1_1.value;\r\n                let elID = blob.name.split(\"/\");\r\n                if (!(current_elID === elID[0])) {\r\n                    map.set(current_elID, currentArray);\r\n                    currentArray = new Array();\r\n                }\r\n                if (!map.has(elID[0])) {\r\n                    current_elID = elID[0];\r\n                }\r\n                currentArray.push(elID[1].replace(\".json\", \"\"));\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1.return)) await _a.call(blobs_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return map;\r\n    }\r\n    containerClient() {\r\n        return new BlobServiceClient(`https://${this.storageAccount}.blob.core.windows.net?`)\r\n            .getContainerClient(this.storageContainer);\r\n    }\r\n}\r\nBlobInService.ɵfac = function BlobInService_Factory(t) { return new (t || BlobInService)(); };\r\nBlobInService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BlobInService, factory: BlobInService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}