{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createSpanFunction, SpanStatusCode } from \"@azure/core-tracing\";\n/**\n * Creates a span using the global tracer.\n * @internal\n */\n\nexport const createSpan = createSpanFunction({\n  packagePrefix: \"\",\n  namespace: \"Microsoft.AAD\"\n});\n/**\n * From: https://github.com/Azure/azure-sdk-for-js/blob/46139daa3317a0d12e8b55b02b9d9cdf1b2e762a/sdk/appconfiguration/app-configuration/src/internal/tracingHelpers.ts\n * Traces an operation and properly handles reporting start, end and errors for a given span\n *\n * @param operationName - Name of a method in the TClient type\n * @param options - An options class, typically derived from \\@azure/core-rest-pipeline/RequestOptionsBase\n * @param fn - The function to call with an options class that properly propagates the span context\n *\n * @internal\n */\n\nexport function trace(_x, _x2, _x3) {\n  return _trace.apply(this, arguments);\n}\n\nfunction _trace() {\n  _trace = _asyncToGenerator(function* (operationName, options, fn, createSpanFn = createSpan) {\n    const {\n      updatedOptions,\n      span\n    } = createSpanFn(operationName, options);\n\n    try {\n      // NOTE: we really do need to await on this function here so we can handle any exceptions thrown and properly\n      // close the span.\n      const result = yield fn(updatedOptions, span); // otel 0.16+ needs this or else the code ends up being set as UNSET\n\n      span.setStatus({\n        code: SpanStatusCode.OK\n      });\n      return result;\n    } catch (err) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message\n      });\n      throw err;\n    } finally {\n      span.end();\n    }\n  });\n  return _trace.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/identity/dist-esm/src/util/tracing.js"],"names":["createSpanFunction","SpanStatusCode","createSpan","packagePrefix","namespace","trace","operationName","options","fn","createSpanFn","updatedOptions","span","result","setStatus","code","OK","err","ERROR","message","end"],"mappings":";AAAA;AACA;AACA,SAASA,kBAAT,EAA6BC,cAA7B,QAAmD,qBAAnD;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAGF,kBAAkB,CAAC;AACzCG,EAAAA,aAAa,EAAE,EAD0B;AAEzCC,EAAAA,SAAS,EAAE;AAF8B,CAAD,CAArC;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAsBC,KAAtB;AAAA;AAAA;;;6BAAO,WAAqBC,aAArB,EAAoCC,OAApC,EAA6CC,EAA7C,EAAiDC,YAAY,GAAGP,UAAhE,EAA4E;AAC/E,UAAM;AAAEQ,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAA2BF,YAAY,CAACH,aAAD,EAAgBC,OAAhB,CAA7C;;AACA,QAAI;AACA;AACA;AACA,YAAMK,MAAM,SAASJ,EAAE,CAACE,cAAD,EAAiBC,IAAjB,CAAvB,CAHA,CAIA;;AACAA,MAAAA,IAAI,CAACE,SAAL,CAAe;AACXC,QAAAA,IAAI,EAAEb,cAAc,CAACc;AADV,OAAf;AAGA,aAAOH,MAAP;AACH,KATD,CAUA,OAAOI,GAAP,EAAY;AACRL,MAAAA,IAAI,CAACE,SAAL,CAAe;AACXC,QAAAA,IAAI,EAAEb,cAAc,CAACgB,KADV;AAEXC,QAAAA,OAAO,EAAEF,GAAG,CAACE;AAFF,OAAf;AAIA,YAAMF,GAAN;AACH,KAhBD,SAiBQ;AACJL,MAAAA,IAAI,CAACQ,GAAL;AACH;AACJ,G","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createSpanFunction, SpanStatusCode } from \"@azure/core-tracing\";\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const createSpan = createSpanFunction({\n    packagePrefix: \"\",\n    namespace: \"Microsoft.AAD\",\n});\n/**\n * From: https://github.com/Azure/azure-sdk-for-js/blob/46139daa3317a0d12e8b55b02b9d9cdf1b2e762a/sdk/appconfiguration/app-configuration/src/internal/tracingHelpers.ts\n * Traces an operation and properly handles reporting start, end and errors for a given span\n *\n * @param operationName - Name of a method in the TClient type\n * @param options - An options class, typically derived from \\@azure/core-rest-pipeline/RequestOptionsBase\n * @param fn - The function to call with an options class that properly propagates the span context\n *\n * @internal\n */\nexport async function trace(operationName, options, fn, createSpanFn = createSpan) {\n    const { updatedOptions, span } = createSpanFn(operationName, options);\n    try {\n        // NOTE: we really do need to await on this function here so we can handle any exceptions thrown and properly\n        // close the span.\n        const result = await fn(updatedOptions, span);\n        // otel 0.16+ needs this or else the code ends up being set as UNSET\n        span.setStatus({\n            code: SpanStatusCode.OK,\n        });\n        return result;\n    }\n    catch (err) {\n        span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: err.message,\n        });\n        throw err;\n    }\n    finally {\n        span.end();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}