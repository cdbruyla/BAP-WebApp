{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { isDefined } from \"./typeguards\";\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *   @param abortSignal - The abortSignal associated with containing operation.\n *   @param abortErrorMsg - The abort error message associated with containing operation.\n * @returns - Resolved promise\n */\n\nexport function delay(delayInMs, value, options) {\n  return new Promise((resolve, reject) => {\n    let timer = undefined;\n    let onAborted = undefined;\n\n    const rejectOnAbort = () => {\n      return reject(new AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));\n    };\n\n    const removeListeners = () => {\n      if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = () => {\n      if (isDefined(timer)) {\n        clearTimeout(timer);\n      }\n\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n} //# sourceMappingURL=delay.js.map","map":null,"metadata":{},"sourceType":"module"}