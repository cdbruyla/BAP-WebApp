{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpHeaders } from \"../httpHeaders\";\n/**\n * Authenticates to a service using an API key.\n */\n\nexport class ApiKeyCredentials {\n  /**\n   * @param options - Specifies the options to be provided for auth. Either header or query needs to be provided.\n   */\n  constructor(options) {\n    if (!options || options && !options.inHeader && !options.inQuery) {\n      throw new Error(`options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.`);\n    }\n\n    this.inHeader = options.inHeader;\n    this.inQuery = options.inQuery;\n  }\n  /**\n   * Signs a request with the values provided in the inHeader and inQuery parameter.\n   *\n   * @param webResource - The WebResourceLike to be signed.\n   * @returns The signed request object.\n   */\n\n\n  signRequest(webResource) {\n    if (!webResource) {\n      return Promise.reject(new Error(`webResource cannot be null or undefined and must be of type \"object\".`));\n    }\n\n    if (this.inHeader) {\n      if (!webResource.headers) {\n        webResource.headers = new HttpHeaders();\n      }\n\n      for (const headerName in this.inHeader) {\n        webResource.headers.set(headerName, this.inHeader[headerName]);\n      }\n    }\n\n    if (this.inQuery) {\n      if (!webResource.url) {\n        return Promise.reject(new Error(`url cannot be null in the request object.`));\n      }\n\n      if (webResource.url.indexOf(\"?\") < 0) {\n        webResource.url += \"?\";\n      }\n\n      for (const key in this.inQuery) {\n        if (!webResource.url.endsWith(\"?\")) {\n          webResource.url += \"&\";\n        }\n\n        webResource.url += `${key}=${this.inQuery[key]}`;\n      }\n    }\n\n    return Promise.resolve(webResource);\n  }\n\n} //# sourceMappingURL=apiKeyCredentials.js.map","map":null,"metadata":{},"sourceType":"module"}