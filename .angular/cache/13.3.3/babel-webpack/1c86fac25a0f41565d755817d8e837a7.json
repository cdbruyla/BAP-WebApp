{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isErrorResponse(errorResponse) {\n  return errorResponse && typeof errorResponse.error === \"string\" && typeof errorResponse.error_description === \"string\";\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */\n\n\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\n\nexport class CredentialUnavailableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = CredentialUnavailableErrorName;\n  }\n\n}\n/**\n * The Error.name value of an AuthenticationError\n */\n\nexport const AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\n\nexport class AuthenticationError extends Error {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(statusCode, errorBody) {\n    let errorResponse = {\n      error: \"unknown\",\n      errorDescription: \"An unknown error occurred and no additional details are available.\"\n    };\n\n    if (isErrorResponse(errorBody)) {\n      errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n    } else if (typeof errorBody === \"string\") {\n      try {\n        // Most error responses will contain JSON-formatted error details\n        // in the response body\n        const oauthErrorResponse = JSON.parse(errorBody);\n        errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n      } catch (e) {\n        if (statusCode === 400) {\n          errorResponse = {\n            error: \"authority_not_found\",\n            errorDescription: \"The specified authority URL was not found.\"\n          };\n        } else {\n          errorResponse = {\n            error: \"unknown_error\",\n            errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`\n          };\n        }\n      }\n    } else {\n      errorResponse = {\n        error: \"unknown_error\",\n        errorDescription: \"An unknown error occurred and no additional details are available.\"\n      };\n    }\n\n    super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`);\n    this.statusCode = statusCode;\n    this.errorResponse = errorResponse; // Ensure that this type reports the correct name\n\n    this.name = AuthenticationErrorName;\n  }\n\n}\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\n\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\n\nexport class AggregateAuthenticationError extends Error {\n  constructor(errors, errorMessage) {\n    const errorDetail = errors.join(\"\\n\");\n    super(`${errorMessage}\\n${errorDetail}`);\n    this.errors = errors; // Ensure that this type reports the correct name\n\n    this.name = AggregateAuthenticationErrorName;\n  }\n\n}\n\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n  return {\n    error: errorBody.error,\n    errorDescription: errorBody.error_description,\n    correlationId: errorBody.correlation_id,\n    errorCodes: errorBody.error_codes,\n    timestamp: errorBody.timestamp,\n    traceId: errorBody.trace_id\n  };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\n\n\nexport class AuthenticationRequiredError extends Error {\n  constructor(\n  /**\n   * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n   */\n  options) {\n    super(options.message);\n    this.scopes = options.scopes;\n    this.getTokenOptions = options.getTokenOptions;\n    this.name = \"AuthenticationRequiredError\";\n  }\n\n} //# sourceMappingURL=errors.js.map","map":null,"metadata":{},"sourceType":"module"}