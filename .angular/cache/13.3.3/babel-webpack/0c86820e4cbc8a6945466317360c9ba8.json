{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { URLConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\n\nexport function NewRetryPolicyFactory(retryOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n/**\n * RetryPolicy types.\n */\n\nexport var StorageRetryPolicyType = /*#__PURE__*/(() => {\n  (function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n  })(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n\n  return StorageRetryPolicyType;\n})();\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n\n};\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\n\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n    super(nextPolicy, options); // Initialize retry options\n\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,\n      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n\n\n  sendRequest(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.attemptSendRequest(request, false, 1);\n    })();\n  }\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n\n\n  attemptSendRequest(request, secondaryHas404, attempt) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const newRequest = request.clone();\n      const isPrimaryRetry = secondaryHas404 || !_this2.retryOptions.secondaryHost || !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") || attempt % 2 === 1;\n\n      if (!isPrimaryRetry) {\n        newRequest.url = setURLHost(newRequest.url, _this2.retryOptions.secondaryHost);\n      } // Set the server-side timeout query parameter \"timeout=[seconds]\"\n\n\n      if (_this2.retryOptions.tryTimeoutInMs) {\n        newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(_this2.retryOptions.tryTimeoutInMs / 1000).toString());\n      }\n\n      let response;\n\n      try {\n        logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n        response = yield _this2._nextPolicy.sendRequest(newRequest);\n\n        if (!_this2.shouldRetry(isPrimaryRetry, attempt, response)) {\n          return response;\n        }\n\n        secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;\n      } catch (err) {\n        logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n\n        if (!_this2.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n          throw err;\n        }\n      }\n\n      yield _this2.delay(isPrimaryRetry, attempt, request.abortSignal);\n      return _this2.attemptSendRequest(request, secondaryHas404, ++attempt);\n    })();\n  }\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n\n\n  shouldRetry(isPrimaryRetry, attempt, response, err) {\n    if (attempt >= this.retryOptions.maxTries) {\n      logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);\n      return false;\n    } // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n\n\n    const retriableErrors = [\"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\", \"ENOENT\", \"ENOTFOUND\", \"TIMEOUT\", \"EPIPE\", \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    } // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n\n\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      } // Server internal error or server timeout\n\n\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n      logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n\n\n  delay(isPrimaryRetry, attempt, abortSignal) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let delayTimeInMs = 0;\n\n      if (isPrimaryRetry) {\n        switch (_this3.retryOptions.retryPolicyType) {\n          case StorageRetryPolicyType.EXPONENTIAL:\n            delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * _this3.retryOptions.retryDelayInMs, _this3.retryOptions.maxRetryDelayInMs);\n            break;\n\n          case StorageRetryPolicyType.FIXED:\n            delayTimeInMs = _this3.retryOptions.retryDelayInMs;\n            break;\n        }\n      } else {\n        delayTimeInMs = Math.random() * 1000;\n      }\n\n      logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n      return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    })();\n  }\n\n} //# sourceMappingURL=StorageRetryPolicy.js.map","map":null,"metadata":{},"sourceType":"module"}