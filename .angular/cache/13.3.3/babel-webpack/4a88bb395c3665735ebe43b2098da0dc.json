{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar MutexLockStatus = /*#__PURE__*/(() => {\n  (function (MutexLockStatus) {\n    MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n    MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n  })(MutexLockStatus || (MutexLockStatus = {}));\n\n  return MutexLockStatus;\n})();\n\n/**\n * An async mutex lock.\n */\nexport let Mutex = /*#__PURE__*/(() => {\n  class Mutex {\n    /**\n     * Lock for a specific key. If the lock has been acquired by another customer, then\n     * will wait until getting the lock.\n     *\n     * @param key - lock key\n     */\n    static lock(key) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          if (_this.keys[key] === undefined || _this.keys[key] === MutexLockStatus.UNLOCKED) {\n            _this.keys[key] = MutexLockStatus.LOCKED;\n            resolve();\n          } else {\n            _this.onUnlockEvent(key, () => {\n              _this.keys[key] = MutexLockStatus.LOCKED;\n              resolve();\n            });\n          }\n        });\n      })();\n    }\n    /**\n     * Unlock a key.\n     *\n     * @param key -\n     */\n\n\n    static unlock(key) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        return new Promise(resolve => {\n          if (_this2.keys[key] === MutexLockStatus.LOCKED) {\n            _this2.emitUnlockEvent(key);\n          }\n\n          delete _this2.keys[key];\n          resolve();\n        });\n      })();\n    }\n\n    static onUnlockEvent(key, handler) {\n      if (this.listeners[key] === undefined) {\n        this.listeners[key] = [handler];\n      } else {\n        this.listeners[key].push(handler);\n      }\n    }\n\n    static emitUnlockEvent(key) {\n      if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n        const handler = this.listeners[key].shift();\n        setImmediate(() => {\n          handler.call(this);\n        });\n      }\n    }\n\n  }\n\n  Mutex.keys = {};\n  Mutex.listeners = {}; //# sourceMappingURL=Mutex.js.map\n\n  return Mutex;\n})();","map":null,"metadata":{},"sourceType":"module"}