{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n  return headerName.toLowerCase();\n}\n\nexport function isHttpHeadersLike(object) {\n  if (object && typeof object === \"object\") {\n    const castObject = object;\n\n    if (typeof castObject.rawHeaders === \"function\" && typeof castObject.clone === \"function\" && typeof castObject.get === \"function\" && typeof castObject.set === \"function\" && typeof castObject.contains === \"function\" && typeof castObject.remove === \"function\" && typeof castObject.headersArray === \"function\" && typeof castObject.headerValues === \"function\" && typeof castObject.headerNames === \"function\" && typeof castObject.toJson === \"function\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\n\nexport class HttpHeaders {\n  constructor(rawHeaders) {\n    this._headersMap = {};\n\n    if (rawHeaders) {\n      for (const headerName in rawHeaders) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param headerName - The name of the header to set. This value is case-insensitive.\n   * @param headerValue - The value of the header to set.\n   */\n\n\n  set(headerName, headerValue) {\n    this._headersMap[getHeaderKey(headerName)] = {\n      name: headerName,\n      value: headerValue.toString()\n    };\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param headerName - The name of the header.\n   */\n\n\n  get(headerName) {\n    const header = this._headersMap[getHeaderKey(headerName)];\n\n    return !header ? undefined : header.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   */\n\n\n  contains(headerName) {\n    return !!this._headersMap[getHeaderKey(headerName)];\n  }\n  /**\n   * Remove the header with the provided headerName. Return whether or not the header existed and\n   * was removed.\n   * @param headerName - The name of the header to remove.\n   */\n\n\n  remove(headerName) {\n    const result = this.contains(headerName);\n    delete this._headersMap[getHeaderKey(headerName)];\n    return result;\n  }\n  /**\n   * Get the headers that are contained this collection as an object.\n   */\n\n\n  rawHeaders() {\n    return this.toJson({\n      preserveCase: true\n    });\n  }\n  /**\n   * Get the headers that are contained in this collection as an array.\n   */\n\n\n  headersArray() {\n    const headers = [];\n\n    for (const headerKey in this._headersMap) {\n      headers.push(this._headersMap[headerKey]);\n    }\n\n    return headers;\n  }\n  /**\n   * Get the header names that are contained in this collection.\n   */\n\n\n  headerNames() {\n    const headerNames = [];\n    const headers = this.headersArray();\n\n    for (let i = 0; i < headers.length; ++i) {\n      headerNames.push(headers[i].name);\n    }\n\n    return headerNames;\n  }\n  /**\n   * Get the header values that are contained in this collection.\n   */\n\n\n  headerValues() {\n    const headerValues = [];\n    const headers = this.headersArray();\n\n    for (let i = 0; i < headers.length; ++i) {\n      headerValues.push(headers[i].value);\n    }\n\n    return headerValues;\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n\n\n  toJson(options = {}) {\n    const result = {};\n\n    if (options.preserveCase) {\n      for (const headerKey in this._headersMap) {\n        const header = this._headersMap[headerKey];\n        result[header.name] = header.value;\n      }\n    } else {\n      for (const headerKey in this._headersMap) {\n        const header = this._headersMap[headerKey];\n        result[getHeaderKey(header.name)] = header.value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJson({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Create a deep clone/copy of this HttpHeaders collection.\n   */\n\n\n  clone() {\n    const resultPreservingCasing = {};\n\n    for (const headerKey in this._headersMap) {\n      const header = this._headersMap[headerKey];\n      resultPreservingCasing[header.name] = header.value;\n    }\n\n    return new HttpHeaders(resultPreservingCasing);\n  }\n\n} //# sourceMappingURL=httpHeaders.js.map","map":null,"metadata":{},"sourceType":"module"}