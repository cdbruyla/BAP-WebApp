{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  constructor(credential, scopes, requiredMillisecondsBeforeNewRefresh = 30000) {\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n\n\n  isReady() {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n  }\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n\n\n  getToken(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.lastCalled = Date.now();\n      const token = yield _this.credential.getToken(_this.scopes, options);\n      _this.promise = undefined;\n      return token || undefined;\n    })();\n  }\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n\n\n  refresh(options) {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n\n} //# sourceMappingURL=accessTokenRefresher.js.map","map":null,"metadata":{},"sourceType":"module"}