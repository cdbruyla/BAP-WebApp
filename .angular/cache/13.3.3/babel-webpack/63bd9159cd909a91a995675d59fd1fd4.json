{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __asyncValues } from \"tslib\";\nimport * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { DefaultAzureCredential } from \"@azure/identity\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\n__NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).catch(err => console.error(err));\n\nconst namespace = \"DefaultEndpointsProtocol=https;AccountName=storagebap;AccountKey=I5M3OOteAjwcZ+jlsy8Bd+tnwiFqoYGGK7d2t4XdZM7HFerlej4tDaVgUCXWGW/eFt3S/AUHJc3Bmm2oNs25LA==;EndpointSuffix=core.windows.net\";\nconst account = \"bapstorage\";\nconst defaultAzureCredential = new DefaultAzureCredential();\nconst blobServiceClient = new BlobServiceClient(`https://${account}.blob.core.windows.net`, defaultAzureCredential);\nconst containerName = \"bap-storage-container\";\n\nfunction main() {\n  return _main.apply(this, arguments);\n}\n\nfunction _main() {\n  _main = _asyncToGenerator(function* () {\n    var e_1, _a;\n\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n    let i = 1;\n    let blobs = containerClient.listBlobsFlat();\n\n    try {\n      for (var blobs_1 = __asyncValues(blobs), blobs_1_1; blobs_1_1 = yield blobs_1.next(), !blobs_1_1.done;) {\n        const blob = blobs_1_1.value;\n        console.log(`Blob ${i++}: ${blob.name}`);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1.return)) yield _a.call(blobs_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  });\n  return _main.apply(this, arguments);\n}\n\nmain(); // * setting up to retrieve data from blobstorage\n\nfetch(`https://${namespace}.blob.core.windows.net/${containerName}/?restype=container&comp=list`).then(response => response.text()).then(str => new window.DOMParser().parseFromString(str, \"text/xml\")).then(xml => {\n  let blobList = Array.from(xml.querySelectorAll(\"Url\")); //.getAttribute(\"Url\");\n\n  blobList.forEach( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (blobUrl) {\n      console.log(blobUrl);\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/src/main.ts"],"names":["__asyncValues","__NgCli_bootstrap_1","enableProdMode","AppModule","environment","DefaultAzureCredential","BlobServiceClient","production","platformBrowser","bootstrapModule","catch","err","console","error","namespace","account","defaultAzureCredential","blobServiceClient","containerName","main","e_1","_a","containerClient","getContainerClient","i","blobs","listBlobsFlat","blobs_1","blobs_1_1","next","done","blob","value","log","name","e_1_1","return","call","fetch","then","response","text","str","window","DOMParser","parseFromString","xml","blobList","Array","from","querySelectorAll","forEach","blobUrl"],"mappings":";AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAO,KAAKC,mBAAZ,MAAqC,2BAArC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AACA,IAAIF,WAAW,CAACG,UAAhB,EAA4B;AACxBL,EAAAA,cAAc;AACjB;;AACDD,mBAAmB,CAACO,eAApB,GAAsCC,eAAtC,CAAsDN,SAAtD,EACKO,KADL,CACWC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADlB;;AAEA,MAAMG,SAAS,GAAG,2LAAlB;AACA,MAAMC,OAAO,GAAG,YAAhB;AACA,MAAMC,sBAAsB,GAAG,IAAIX,sBAAJ,EAA/B;AACA,MAAMY,iBAAiB,GAAG,IAAIX,iBAAJ,CAAuB,WAAUS,OAAQ,wBAAzC,EAAkEC,sBAAlE,CAA1B;AACA,MAAME,aAAa,GAAG,uBAAtB;;SACeC,I;;;;;4BAAf,aAAsB;AAClB,QAAIC,GAAJ,EAASC,EAAT;;AACA,UAAMC,eAAe,GAAGL,iBAAiB,CAACM,kBAAlB,CAAqCL,aAArC,CAAxB;AACA,QAAIM,CAAC,GAAG,CAAR;AACA,QAAIC,KAAK,GAAGH,eAAe,CAACI,aAAhB,EAAZ;;AACA,QAAI;AACA,WAAK,IAAIC,OAAO,GAAG3B,aAAa,CAACyB,KAAD,CAA3B,EAAoCG,SAAzC,EAAoDA,SAAS,SAASD,OAAO,CAACE,IAAR,EAAlB,EAAkC,CAACD,SAAS,CAACE,IAAjG,GAAwG;AACpG,cAAMC,IAAI,GAAGH,SAAS,CAACI,KAAvB;AACApB,QAAAA,OAAO,CAACqB,GAAR,CAAa,QAAOT,CAAC,EAAG,KAAIO,IAAI,CAACG,IAAK,EAAtC;AACH;AACJ,KALD,CAMA,OAAOC,KAAP,EAAc;AAAEf,MAAAA,GAAG,GAAG;AAAEP,QAAAA,KAAK,EAAEsB;AAAT,OAAN;AAAyB,KANzC,SAOQ;AACJ,UAAI;AACA,YAAIP,SAAS,IAAI,CAACA,SAAS,CAACE,IAAxB,KAAiCT,EAAE,GAAGM,OAAO,CAACS,MAA9C,CAAJ,EAA2D,MAAMf,EAAE,CAACgB,IAAH,CAAQV,OAAR,CAAN;AAC9D,OAFD,SAGQ;AAAE,YAAIP,GAAJ,EAAS,MAAMA,GAAG,CAACP,KAAV;AAAkB;AACxC;AACJ,G;;;;AACDM,IAAI,G,CACJ;;AACAmB,KAAK,CAAE,WAAUxB,SAAU,0BAAyBI,aAAc,+BAA7D,CAAL,CACKqB,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,GAAG,IAAI,IAAIC,MAAM,CAACC,SAAX,GAAuBC,eAAvB,CAAuCH,GAAvC,EAA4C,UAA5C,CAFjB,EAGKH,IAHL,CAGUO,GAAG,IAAI;AACb,MAAIC,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWH,GAAG,CAACI,gBAAJ,CAAqB,KAArB,CAAX,CAAf,CADa,CAC2C;;AACxDH,EAAAA,QAAQ,CAACI,OAAT;AAAA,iCAAiB,WAAOC,OAAP,EAAmB;AAChCxC,MAAAA,OAAO,CAACqB,GAAR,CAAYmB,OAAZ;AACH,KAFD;;AAAA;AAAA;AAAA;AAAA;AAGH,CARD","sourcesContent":["import { __asyncValues } from \"tslib\";\r\nimport * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { DefaultAzureCredential } from \"@azure/identity\";\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\nif (environment.production) {\r\n    enableProdMode();\r\n}\r\n__NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule)\r\n    .catch(err => console.error(err));\r\nconst namespace = \"DefaultEndpointsProtocol=https;AccountName=storagebap;AccountKey=I5M3OOteAjwcZ+jlsy8Bd+tnwiFqoYGGK7d2t4XdZM7HFerlej4tDaVgUCXWGW/eFt3S/AUHJc3Bmm2oNs25LA==;EndpointSuffix=core.windows.net\";\r\nconst account = \"bapstorage\";\r\nconst defaultAzureCredential = new DefaultAzureCredential();\r\nconst blobServiceClient = new BlobServiceClient(`https://${account}.blob.core.windows.net`, defaultAzureCredential);\r\nconst containerName = \"bap-storage-container\";\r\nasync function main() {\r\n    var e_1, _a;\r\n    const containerClient = blobServiceClient.getContainerClient(containerName);\r\n    let i = 1;\r\n    let blobs = containerClient.listBlobsFlat();\r\n    try {\r\n        for (var blobs_1 = __asyncValues(blobs), blobs_1_1; blobs_1_1 = await blobs_1.next(), !blobs_1_1.done;) {\r\n            const blob = blobs_1_1.value;\r\n            console.log(`Blob ${i++}: ${blob.name}`);\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1.return)) await _a.call(blobs_1);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n}\r\nmain();\r\n// * setting up to retrieve data from blobstorage\r\nfetch(`https://${namespace}.blob.core.windows.net/${containerName}/?restype=container&comp=list`)\r\n    .then(response => response.text())\r\n    .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\r\n    .then(xml => {\r\n    let blobList = Array.from(xml.querySelectorAll(\"Url\")); //.getAttribute(\"Url\");\r\n    blobList.forEach(async (blobUrl) => {\r\n        console.log(blobUrl);\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}