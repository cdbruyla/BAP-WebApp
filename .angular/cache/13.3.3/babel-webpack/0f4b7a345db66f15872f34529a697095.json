{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\n\nclass HttpPipeline {\n  constructor(policies = []) {\n    this._policies = [];\n    this._policies = policies;\n    this._orderedPolicies = undefined;\n  }\n\n  addPolicy(policy, options = {}) {\n    if (options.phase && options.afterPhase) {\n      throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n    }\n\n    if (options.phase && !ValidPhaseNames.has(options.phase)) {\n      throw new Error(`Invalid phase name: ${options.phase}`);\n    }\n\n    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n    }\n\n    this._policies.push({\n      policy,\n      options\n    });\n\n    this._orderedPolicies = undefined;\n  }\n\n  removePolicy(options) {\n    const removedPolicies = [];\n    this._policies = this._policies.filter(policyDescriptor => {\n      if (options.name && policyDescriptor.policy.name === options.name || options.phase && policyDescriptor.options.phase === options.phase) {\n        removedPolicies.push(policyDescriptor.policy);\n        return false;\n      } else {\n        return true;\n      }\n    });\n    this._orderedPolicies = undefined;\n    return removedPolicies;\n  }\n\n  sendRequest(httpClient, request) {\n    const policies = this.getOrderedPolicies();\n    const pipeline = policies.reduceRight((next, policy) => {\n      return req => {\n        return policy.sendRequest(req, next);\n      };\n    }, req => httpClient.sendRequest(req));\n    return pipeline(request);\n  }\n\n  getOrderedPolicies() {\n    if (!this._orderedPolicies) {\n      this._orderedPolicies = this.orderPolicies();\n    }\n\n    return this._orderedPolicies;\n  }\n\n  clone() {\n    return new HttpPipeline(this._policies);\n  }\n\n  static create() {\n    return new HttpPipeline();\n  }\n\n  orderPolicies() {\n    /**\n     * The goal of this method is to reliably order pipeline policies\n     * based on their declared requirements when they were added.\n     *\n     * Order is first determined by phase:\n     *\n     * 1. Serialize Phase\n     * 2. Policies not in a phase\n     * 3. Deserialize Phase\n     * 4. Retry Phase\n     * 5. Sign Phase\n     *\n     * Within each phase, policies are executed in the order\n     * they were added unless they were specified to execute\n     * before/after other policies or after a particular phase.\n     *\n     * To determine the final order, we will walk the policy list\n     * in phase order multiple times until all dependencies are\n     * satisfied.\n     *\n     * `afterPolicies` are the set of policies that must be\n     * executed before a given policy. This requirement is\n     * considered satisfied when each of the listed policies\n     * have been scheduled.\n     *\n     * `beforePolicies` are the set of policies that must be\n     * executed after a given policy. Since this dependency\n     * can be expressed by converting it into a equivalent\n     * `afterPolicies` declarations, they are normalized\n     * into that form for simplicity.\n     *\n     * An `afterPhase` dependency is considered satisfied when all\n     * policies in that phase have scheduled.\n     *\n     */\n    const result = []; // Track all policies we know about.\n\n    const policyMap = new Map();\n\n    function createPhase(name) {\n      return {\n        name,\n        policies: new Set(),\n        hasRun: false\n      };\n    } // Track policies for each phase.\n\n\n    const serializePhase = createPhase(\"Serialize\");\n    const noPhase = createPhase(\"None\");\n    const deserializePhase = createPhase(\"Deserialize\");\n    const retryPhase = createPhase(\"Retry\");\n    const signPhase = createPhase(\"Sign\"); // a list of phases in order\n\n    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase]; // Small helper function to map phase name to each Phase\n\n    function getPhase(phase) {\n      if (phase === \"Retry\") {\n        return retryPhase;\n      } else if (phase === \"Serialize\") {\n        return serializePhase;\n      } else if (phase === \"Deserialize\") {\n        return deserializePhase;\n      } else if (phase === \"Sign\") {\n        return signPhase;\n      } else {\n        return noPhase;\n      }\n    } // First walk each policy and create a node to track metadata.\n\n\n    for (const descriptor of this._policies) {\n      const policy = descriptor.policy;\n      const options = descriptor.options;\n      const policyName = policy.name;\n\n      if (policyMap.has(policyName)) {\n        throw new Error(\"Duplicate policy names not allowed in pipeline\");\n      }\n\n      const node = {\n        policy,\n        dependsOn: new Set(),\n        dependants: new Set()\n      };\n\n      if (options.afterPhase) {\n        node.afterPhase = getPhase(options.afterPhase);\n      }\n\n      policyMap.set(policyName, node);\n      const phase = getPhase(options.phase);\n      phase.policies.add(node);\n    } // Now that each policy has a node, connect dependency references.\n\n\n    for (const descriptor of this._policies) {\n      const {\n        policy,\n        options\n      } = descriptor;\n      const policyName = policy.name;\n      const node = policyMap.get(policyName);\n\n      if (!node) {\n        throw new Error(`Missing node for policy ${policyName}`);\n      }\n\n      if (options.afterPolicies) {\n        for (const afterPolicyName of options.afterPolicies) {\n          const afterNode = policyMap.get(afterPolicyName);\n\n          if (afterNode) {\n            // Linking in both directions helps later\n            // when we want to notify dependants.\n            node.dependsOn.add(afterNode);\n            afterNode.dependants.add(node);\n          }\n        }\n      }\n\n      if (options.beforePolicies) {\n        for (const beforePolicyName of options.beforePolicies) {\n          const beforeNode = policyMap.get(beforePolicyName);\n\n          if (beforeNode) {\n            // To execute before another node, make it\n            // depend on the current node.\n            beforeNode.dependsOn.add(node);\n            node.dependants.add(beforeNode);\n          }\n        }\n      }\n    }\n\n    function walkPhase(phase) {\n      phase.hasRun = true; // Sets iterate in insertion order\n\n      for (const node of phase.policies) {\n        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n          // If this node is waiting on a phase to complete,\n          // we need to skip it for now.\n          // Even if the phase is empty, we should wait for it\n          // to be walked to avoid re-ordering policies.\n          continue;\n        }\n\n        if (node.dependsOn.size === 0) {\n          // If there's nothing else we're waiting for, we can\n          // add this policy to the result list.\n          result.push(node.policy); // Notify anything that depends on this policy that\n          // the policy has been scheduled.\n\n          for (const dependant of node.dependants) {\n            dependant.dependsOn.delete(node);\n          }\n\n          policyMap.delete(node.policy.name);\n          phase.policies.delete(node);\n        }\n      }\n    }\n\n    function walkPhases() {\n      for (const phase of orderedPhases) {\n        walkPhase(phase); // if the phase isn't complete\n\n        if (phase.policies.size > 0 && phase !== noPhase) {\n          if (!noPhase.hasRun) {\n            // Try running noPhase to see if that unblocks this phase next tick.\n            // This can happen if a phase that happens before noPhase\n            // is waiting on a noPhase policy to complete.\n            walkPhase(noPhase);\n          } // Don't proceed to the next phase until this phase finishes.\n\n\n          return;\n        }\n      }\n    } // Iterate until we've put every node in the result list.\n\n\n    let iteration = 0;\n\n    while (policyMap.size > 0) {\n      iteration++;\n      const initialResultLength = result.length; // Keep walking each phase in order until we can order every node.\n\n      walkPhases(); // The result list *should* get at least one larger each time\n      // after the first full pass.\n      // Otherwise, we're going to loop forever.\n\n      if (result.length <= initialResultLength && iteration > 1) {\n        throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\n\n\nexport function createEmptyPipeline() {\n  return HttpPipeline.create();\n} //# sourceMappingURL=pipeline.js.map","map":null,"metadata":{},"sourceType":"module"}