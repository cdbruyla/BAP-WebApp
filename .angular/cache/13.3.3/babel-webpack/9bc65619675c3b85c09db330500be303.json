{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class ContainerSASPermissions {\n  constructor() {\n    /**\n     * Specifies Read access granted.\n     */\n    this.read = false;\n    /**\n     * Specifies Add access granted.\n     */\n\n    this.add = false;\n    /**\n     * Specifies Create access granted.\n     */\n\n    this.create = false;\n    /**\n     * Specifies Write access granted.\n     */\n\n    this.write = false;\n    /**\n     * Specifies Delete access granted.\n     */\n\n    this.delete = false;\n    /**\n     * Specifies Delete version access granted.\n     */\n\n    this.deleteVersion = false;\n    /**\n     * Specifies List access granted.\n     */\n\n    this.list = false;\n    /**\n     * Specfies Tag access granted.\n     */\n\n    this.tag = false;\n    /**\n     * Specifies Move access granted.\n     */\n\n    this.move = false;\n    /**\n     * Specifies Execute access granted.\n     */\n\n    this.execute = false;\n    /**\n     * Specifies SetImmutabilityPolicy access granted.\n     */\n\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n\n    this.permanentDelete = false;\n    /**\n     * Specifies that Filter Blobs by Tags is permitted.\n     */\n\n    this.filterByTags = false;\n  }\n  /**\n   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n\n\n  static parse(permissions) {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n\n        case \"t\":\n          containerSASPermissions.tag = true;\n          break;\n\n        case \"x\":\n          containerSASPermissions.deleteVersion = true;\n          break;\n\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n\n        case \"i\":\n          containerSASPermissions.setImmutabilityPolicy = true;\n          break;\n\n        case \"y\":\n          containerSASPermissions.permanentDelete = true;\n          break;\n\n        case \"f\":\n          containerSASPermissions.filterByTags = true;\n          break;\n\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n  /**\n   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n\n\n  static from(permissionLike) {\n    const containerSASPermissions = new ContainerSASPermissions();\n\n    if (permissionLike.read) {\n      containerSASPermissions.read = true;\n    }\n\n    if (permissionLike.add) {\n      containerSASPermissions.add = true;\n    }\n\n    if (permissionLike.create) {\n      containerSASPermissions.create = true;\n    }\n\n    if (permissionLike.write) {\n      containerSASPermissions.write = true;\n    }\n\n    if (permissionLike.delete) {\n      containerSASPermissions.delete = true;\n    }\n\n    if (permissionLike.list) {\n      containerSASPermissions.list = true;\n    }\n\n    if (permissionLike.deleteVersion) {\n      containerSASPermissions.deleteVersion = true;\n    }\n\n    if (permissionLike.tag) {\n      containerSASPermissions.tag = true;\n    }\n\n    if (permissionLike.move) {\n      containerSASPermissions.move = true;\n    }\n\n    if (permissionLike.execute) {\n      containerSASPermissions.execute = true;\n    }\n\n    if (permissionLike.setImmutabilityPolicy) {\n      containerSASPermissions.setImmutabilityPolicy = true;\n    }\n\n    if (permissionLike.permanentDelete) {\n      containerSASPermissions.permanentDelete = true;\n    }\n\n    if (permissionLike.filterByTags) {\n      containerSASPermissions.filterByTags = true;\n    }\n\n    return containerSASPermissions;\n  }\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n\n\n  toString() {\n    const permissions = [];\n\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n\n    if (this.filterByTags) {\n      permissions.push(\"f\");\n    }\n\n    return permissions.join(\"\");\n  }\n\n} //# sourceMappingURL=ContainerSASPermissions.js.map","map":null,"metadata":{},"sourceType":"module"}