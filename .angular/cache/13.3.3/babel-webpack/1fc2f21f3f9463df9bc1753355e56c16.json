{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Detects where the continuation token is and returns it. Notice that azure-asyncoperation\n * must be checked first before the other location headers because there are scenarios\n * where both azure-asyncoperation and location could be present in the same response but\n * azure-asyncoperation should be the one to use for polling.\n */\nexport function getPollingUrl(rawResponse, defaultPath) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = getAzureAsyncOperation(rawResponse)) !== null && _a !== void 0 ? _a : getOperationLocation(rawResponse)) !== null && _b !== void 0 ? _b : getLocation(rawResponse)) !== null && _c !== void 0 ? _c : defaultPath;\n}\n\nfunction getLocation(rawResponse) {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocation(rawResponse) {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperation(rawResponse) {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(requestMethod, rawResponse, requestPath) {\n  switch (requestMethod) {\n    case \"PUT\":\n      {\n        return requestPath;\n      }\n\n    case \"POST\":\n    case \"PATCH\":\n      {\n        return getLocation(rawResponse);\n      }\n\n    default:\n      {\n        return undefined;\n      }\n  }\n}\n\nexport function inferLroMode(requestPath, requestMethod, rawResponse) {\n  if (getAzureAsyncOperation(rawResponse) !== undefined || getOperationLocation(rawResponse) !== undefined) {\n    return {\n      mode: \"Location\",\n      resourceLocation: findResourceLocation(requestMethod, rawResponse, requestPath)\n    };\n  } else if (getLocation(rawResponse) !== undefined) {\n    return {\n      mode: \"Location\"\n    };\n  } else if ([\"PUT\", \"PATCH\"].includes(requestMethod)) {\n    return {\n      mode: \"Body\"\n    };\n  }\n\n  return {};\n}\n\nclass SimpleRestError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.name = \"RestError\";\n    this.statusCode = statusCode;\n    Object.setPrototypeOf(this, SimpleRestError.prototype);\n  }\n\n}\n\nexport function isUnexpectedInitialResponse(rawResponse) {\n  const code = rawResponse.statusCode;\n\n  if (![203, 204, 202, 201, 200, 500].includes(code)) {\n    throw new SimpleRestError(`Received unexpected HTTP status code ${code} in the initial response. This may indicate a server issue.`, code);\n  }\n\n  return false;\n}\nexport function isUnexpectedPollingResponse(rawResponse) {\n  const code = rawResponse.statusCode;\n\n  if (![202, 201, 200, 500].includes(code)) {\n    throw new SimpleRestError(`Received unexpected HTTP status code ${code} while polling. This may indicate a server issue.`, code);\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js"],"names":["getPollingUrl","rawResponse","defaultPath","_a","_b","_c","getAzureAsyncOperation","getOperationLocation","getLocation","headers","findResourceLocation","requestMethod","requestPath","undefined","inferLroMode","mode","resourceLocation","includes","SimpleRestError","Error","constructor","message","statusCode","name","Object","setPrototypeOf","prototype","isUnexpectedInitialResponse","code","isUnexpectedPollingResponse"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Detects where the continuation token is and returns it. Notice that azure-asyncoperation\n * must be checked first before the other location headers because there are scenarios\n * where both azure-asyncoperation and location could be present in the same response but\n * azure-asyncoperation should be the one to use for polling.\n */\nexport function getPollingUrl(rawResponse, defaultPath) {\n    var _a, _b, _c;\n    return ((_c = (_b = (_a = getAzureAsyncOperation(rawResponse)) !== null && _a !== void 0 ? _a : getOperationLocation(rawResponse)) !== null && _b !== void 0 ? _b : getLocation(rawResponse)) !== null && _c !== void 0 ? _c : defaultPath);\n}\nfunction getLocation(rawResponse) {\n    return rawResponse.headers[\"location\"];\n}\nfunction getOperationLocation(rawResponse) {\n    return rawResponse.headers[\"operation-location\"];\n}\nfunction getAzureAsyncOperation(rawResponse) {\n    return rawResponse.headers[\"azure-asyncoperation\"];\n}\nfunction findResourceLocation(requestMethod, rawResponse, requestPath) {\n    switch (requestMethod) {\n        case \"PUT\": {\n            return requestPath;\n        }\n        case \"POST\":\n        case \"PATCH\": {\n            return getLocation(rawResponse);\n        }\n        default: {\n            return undefined;\n        }\n    }\n}\nexport function inferLroMode(requestPath, requestMethod, rawResponse) {\n    if (getAzureAsyncOperation(rawResponse) !== undefined ||\n        getOperationLocation(rawResponse) !== undefined) {\n        return {\n            mode: \"Location\",\n            resourceLocation: findResourceLocation(requestMethod, rawResponse, requestPath),\n        };\n    }\n    else if (getLocation(rawResponse) !== undefined) {\n        return {\n            mode: \"Location\",\n        };\n    }\n    else if ([\"PUT\", \"PATCH\"].includes(requestMethod)) {\n        return {\n            mode: \"Body\",\n        };\n    }\n    return {};\n}\nclass SimpleRestError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = \"RestError\";\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, SimpleRestError.prototype);\n    }\n}\nexport function isUnexpectedInitialResponse(rawResponse) {\n    const code = rawResponse.statusCode;\n    if (![203, 204, 202, 201, 200, 500].includes(code)) {\n        throw new SimpleRestError(`Received unexpected HTTP status code ${code} in the initial response. This may indicate a server issue.`, code);\n    }\n    return false;\n}\nexport function isUnexpectedPollingResponse(rawResponse) {\n    const code = rawResponse.statusCode;\n    if (![202, 201, 200, 500].includes(code)) {\n        throw new SimpleRestError(`Received unexpected HTTP status code ${code} while polling. This may indicate a server issue.`, code);\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}