{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"./helpers\"; // Default options for the cycler if none are provided\n\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\n\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\n\n\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator(function* (getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    function tryGetAccessToken() {\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    function _tryGetAccessToken() {\n      _tryGetAccessToken = _asyncToGenerator(function* () {\n        if (Date.now() < refreshTimeout) {\n          try {\n            return yield getAccessToken();\n          } catch (_a) {\n            return null;\n          }\n        } else {\n          const finalToken = yield getAccessToken(); // Timeout is up, so throw if it's still null\n\n          if (finalToken === null) {\n            throw new Error(\"Failed to refresh access token.\");\n          }\n\n          return finalToken;\n        }\n      });\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    let token = yield tryGetAccessToken();\n\n    while (token === null) {\n      yield delay(retryIntervalInMs);\n      token = yield tryGetAccessToken();\n    }\n\n    return token;\n  });\n  return _beginRefresh.apply(this, arguments);\n}\n\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n\n  function refresh(scopes, getTokenOptions) {\n    var _a;\n\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions); // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n\n\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n\n    return refreshWorker;\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (scopes, tokenOptions) {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      if (cycler.mustRefresh) return refresh(scopes, tokenOptions);\n\n      if (cycler.shouldRefresh) {\n        refresh(scopes, tokenOptions);\n      }\n\n      return token;\n    });\n\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/util/tokenCycler.js"],"names":["delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","refreshTimeout","tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","tokenCyclerOptions","refreshWorker","options","Object","assign","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getToken","then","_token","catch","reason","tokenOptions"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"./helpers\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        if (cycler.mustRefresh)\n            return refresh(scopes, tokenOptions);\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}