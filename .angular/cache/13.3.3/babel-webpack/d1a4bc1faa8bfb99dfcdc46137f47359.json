{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { createSpan } from \"../util/tracing\";\nconst logger = credentialLogger(\"ClientSecretCredential\"); // This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\n\nexport class ClientSecretCredential {\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantId, clientId, clientSecret, options) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n\n\n  getToken(scopes, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions: newOptions\n      } = createSpan(`${_this.constructor.name}.getToken`, options);\n      const query = new URLSearchParams({\n        response_type: \"token\",\n        grant_type: \"client_credentials\",\n        client_id: _this.clientId,\n        client_secret: _this.clientSecret,\n        scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n      });\n\n      try {\n        const urlSuffix = getIdentityTokenEndpointSuffix(_this.tenantId);\n        const request = createPipelineRequest({\n          url: `${_this.identityClient.authorityHost}/${_this.tenantId}/${urlSuffix}`,\n          method: \"POST\",\n          body: query.toString(),\n          headers: createHttpHeaders({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }),\n          abortSignal: options && options.abortSignal,\n          tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions\n        });\n        const tokenResponse = yield _this.identityClient.sendTokenRequest(request);\n        logger.getToken.info(formatSuccess(scopes));\n        return tokenResponse && tokenResponse.accessToken || null;\n      } catch (err) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message\n        });\n        logger.getToken.info(formatError(scopes, err));\n        throw err;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.browser.js"],"names":["createHttpHeaders","createPipelineRequest","SpanStatusCode","credentialLogger","formatError","formatSuccess","getIdentityTokenEndpointSuffix","IdentityClient","createSpan","logger","ClientSecretCredential","constructor","tenantId","clientId","clientSecret","options","identityClient","getToken","scopes","span","updatedOptions","newOptions","name","query","URLSearchParams","response_type","grant_type","client_id","client_secret","scope","join","urlSuffix","request","url","authorityHost","method","body","toString","headers","Accept","abortSignal","tracingOptions","tokenResponse","sendTokenRequest","info","accessToken","err","setStatus","code","ERROR","message","end"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { createSpan } from \"../util/tracing\";\nconst logger = credentialLogger(\"ClientSecretCredential\");\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential {\n    /**\n     * Creates an instance of the ClientSecretCredential with the details\n     * needed to authenticate against Azure Active Directory with a client\n     * secret.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param clientSecret - A client secret that was generated for the App Registration.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, clientSecret, options) {\n        this.identityClient = new IdentityClient(options);\n        this.tenantId = tenantId;\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if\n     * successful.  If authentication cannot be performed at this time, this method may\n     * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n     * containing failure details will be thrown.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options) {\n        const { span, updatedOptions: newOptions } = createSpan(`${this.constructor.name}.getToken`, options);\n        const query = new URLSearchParams({\n            response_type: \"token\",\n            grant_type: \"client_credentials\",\n            client_id: this.clientId,\n            client_secret: this.clientSecret,\n            scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n        try {\n            const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n            const request = createPipelineRequest({\n                url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n                method: \"POST\",\n                body: query.toString(),\n                headers: createHttpHeaders({\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                }),\n                abortSignal: options && options.abortSignal,\n                tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions,\n            });\n            const tokenResponse = await this.identityClient.sendTokenRequest(request);\n            logger.getToken.info(formatSuccess(scopes));\n            return (tokenResponse && tokenResponse.accessToken) || null;\n        }\n        catch (err) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: err.message,\n            });\n            logger.getToken.info(formatError(scopes, err));\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}