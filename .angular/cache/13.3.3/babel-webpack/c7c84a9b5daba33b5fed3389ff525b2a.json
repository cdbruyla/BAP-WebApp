{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { trace } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\n\nexport class InteractiveBrowserCredential {\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(options) {\n    if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n      const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const browserOptions = options;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions = Object.assign(Object.assign({}, options), {\n      logger,\n      loginStyle: loginStyle,\n      redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri\n    });\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n\n\n  getToken(scopes, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return trace(`${_this.constructor.name}.getToken`, options, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (newOptions) {\n          const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n          return _this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n            disableAutomaticAuthentication: _this.disableAutomaticAuthentication\n          }));\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n\n\n  authenticate(scopes, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return trace(`${_this2.constructor.name}.authenticate`, options, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (newOptions) {\n          const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n          yield _this2.msalFlow.getToken(arrayScopes, newOptions);\n          return _this2.msalFlow.getActiveAccount();\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/identity/dist-esm/src/credentials/interactiveBrowserCredential.browser.js"],"names":["credentialLogger","formatError","trace","MSALAuthCode","logger","InteractiveBrowserCredential","constructor","options","clientId","error","Error","info","browserOptions","loginStyle","loginStyles","indexOf","join","msalOptions","Object","assign","redirectUri","msalFlow","disableAutomaticAuthentication","getToken","scopes","name","newOptions","arrayScopes","Array","isArray","authenticate","getActiveAccount"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { trace } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential {\n    /**\n     * Creates an instance of the InteractiveBrowserCredential with the\n     * details needed to authenticate against Azure Active Directory with\n     * a user identity.\n     *\n     * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n     * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n     * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n     *\n     * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n     * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(options) {\n        if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n            const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n            logger.info(formatError(\"\", error));\n            throw error;\n        }\n        const browserOptions = options;\n        const loginStyle = browserOptions.loginStyle || \"popup\";\n        const loginStyles = [\"redirect\", \"popup\"];\n        if (loginStyles.indexOf(loginStyle) === -1) {\n            const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n            logger.info(formatError(\"\", error));\n            throw error;\n        }\n        const msalOptions = Object.assign(Object.assign({}, options), { logger, loginStyle: loginStyle, redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri });\n        this.msalFlow = new MSALAuthCode(msalOptions);\n        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), { disableAutomaticAuthentication: this.disableAutomaticAuthentication }));\n        });\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n    async authenticate(scopes, options = {}) {\n        return trace(`${this.constructor.name}.authenticate`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            await this.msalFlow.getToken(arrayScopes, newOptions);\n            return this.msalFlow.getActiveAccount();\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}