{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from \"tslib\";\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\n\nexport function getPagedAsyncIterator(pagedResult) {\n  var _a;\n\n  const iter = getItemAsyncIterator(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n\n    byPage: (_a = pagedResult === null || pagedResult === void 0 ? void 0 : pagedResult.byPage) !== null && _a !== void 0 ? _a : settings => {\n      return getPageAsyncIterator(pagedResult, settings === null || settings === void 0 ? void 0 : settings.maxPageSize);\n    }\n  };\n}\n\nfunction getItemAsyncIterator(pagedResult, maxPageSize) {\n  return __asyncGenerator(this, arguments, function* getItemAsyncIterator_1() {\n    var e_1, _a;\n\n    const pages = getPageAsyncIterator(pagedResult, maxPageSize);\n    const firstVal = yield __await(pages.next()); // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n\n    if (!Array.isArray(firstVal.value)) {\n      yield yield __await(firstVal.value); // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n\n      yield __await(yield* __asyncDelegator(__asyncValues(pages)));\n    } else {\n      yield __await(yield* __asyncDelegator(__asyncValues(firstVal.value)));\n\n      try {\n        for (var pages_1 = __asyncValues(pages), pages_1_1; pages_1_1 = yield __await(pages_1.next()), !pages_1_1.done;) {\n          const page = pages_1_1.value; // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n          // it must be the case that `TPage = TElement[]`\n\n          yield __await(yield* __asyncDelegator(__asyncValues(page)));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (pages_1_1 && !pages_1_1.done && (_a = pages_1.return)) yield __await(_a.call(pages_1));\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  });\n}\n\nfunction getPageAsyncIterator(pagedResult, maxPageSize) {\n  return __asyncGenerator(this, arguments, function* getPageAsyncIterator_1() {\n    let response = yield __await(pagedResult.getPage(pagedResult.firstPageLink, maxPageSize));\n    yield yield __await(response.page);\n\n    while (response.nextPageLink) {\n      response = yield __await(pagedResult.getPage(response.nextPageLink, maxPageSize));\n      yield yield __await(response.page);\n    }\n  });\n} //# sourceMappingURL=getPagedAsyncIterator.js.map","map":null,"metadata":{},"sourceType":"module"}