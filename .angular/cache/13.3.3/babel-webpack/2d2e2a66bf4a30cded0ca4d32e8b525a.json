{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n/**\n * The programmatic identifier of the logPolicy.\n */\n\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\n\nexport function logPolicy(options = {}) {\n  var _a;\n\n  const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n  });\n  return {\n    name: logPolicyName,\n\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        if (!logger.enabled) {\n          return next(request);\n        }\n\n        logger(`Request: ${sanitizer.sanitize(request)}`);\n        const response = yield next(request);\n        logger(`Response status code: ${response.status}`);\n        logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n        return response;\n      })();\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/logPolicy.js"],"names":["logger","coreLogger","Sanitizer","logPolicyName","logPolicy","options","_a","info","sanitizer","additionalAllowedHeaderNames","additionalAllowedQueryParameters","name","sendRequest","request","next","enabled","sanitize","response","status","headers"],"mappings":";AAAA;AACA;AACA,SAASA,MAAM,IAAIC,UAAnB,QAAqC,QAArC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,WAAtB;AACP;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,OAAO,GAAG,EAA7B,EAAiC;AACpC,MAAIC,EAAJ;;AACA,QAAMN,MAAM,GAAG,CAACM,EAAE,GAAGD,OAAO,CAACL,MAAd,MAA0B,IAA1B,IAAkCM,EAAE,KAAK,KAAK,CAA9C,GAAkDA,EAAlD,GAAuDL,UAAU,CAACM,IAAjF;AACA,QAAMC,SAAS,GAAG,IAAIN,SAAJ,CAAc;AAC5BO,IAAAA,4BAA4B,EAAEJ,OAAO,CAACI,4BADV;AAE5BC,IAAAA,gCAAgC,EAAEL,OAAO,CAACK;AAFd,GAAd,CAAlB;AAIA,SAAO;AACHC,IAAAA,IAAI,EAAER,aADH;;AAEGS,IAAAA,WAAN,CAAkBC,OAAlB,EAA2BC,IAA3B,EAAiC;AAAA;AAC7B,YAAI,CAACd,MAAM,CAACe,OAAZ,EAAqB;AACjB,iBAAOD,IAAI,CAACD,OAAD,CAAX;AACH;;AACDb,QAAAA,MAAM,CAAE,YAAWQ,SAAS,CAACQ,QAAV,CAAmBH,OAAnB,CAA4B,EAAzC,CAAN;AACA,cAAMI,QAAQ,SAASH,IAAI,CAACD,OAAD,CAA3B;AACAb,QAAAA,MAAM,CAAE,yBAAwBiB,QAAQ,CAACC,MAAO,EAA1C,CAAN;AACAlB,QAAAA,MAAM,CAAE,YAAWQ,SAAS,CAACQ,QAAV,CAAmBC,QAAQ,CAACE,OAA5B,CAAqC,EAAlD,CAAN;AACA,eAAOF,QAAP;AAR6B;AAShC;;AAXE,GAAP;AAaH","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module"}