{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { URLBuilder } from \"../url\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\n\nconst allowedRedirect = [\"GET\", \"HEAD\"];\nexport const DefaultRedirectOptions = {\n  handleRedirects: true,\n  maxRetries: 20\n};\n/**\n * Creates a redirect policy, which sends a repeats the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n * @param maximumRetries - Maximum number of redirects to follow.\n * @returns An instance of the {@link RedirectPolicy}\n */\n\nexport function redirectPolicy(maximumRetries = 20) {\n  return {\n    create: (nextPolicy, options) => {\n      return new RedirectPolicy(nextPolicy, options, maximumRetries);\n    }\n  };\n}\n/**\n * Resends the request to a new destination if a response arrives with a \"location\" header, and a status code between 300 and 307.\n */\n\nexport class RedirectPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, maxRetries = 20) {\n    super(nextPolicy, options);\n    this.maxRetries = maxRetries;\n  }\n\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request).then(response => handleRedirect(this, response, 0));\n  }\n\n}\n\nfunction handleRedirect(policy, response, currentRetries) {\n  const {\n    request,\n    status\n  } = response;\n  const locationHeader = response.headers.get(\"location\");\n\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && (!policy.maxRetries || currentRetries < policy.maxRetries)) {\n    const builder = URLBuilder.parse(request.url);\n    builder.setPath(locationHeader);\n    request.url = builder.toString(); // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n\n    if (status === 303) {\n      request.method = \"GET\";\n      delete request.body;\n    }\n\n    return policy._nextPolicy.sendRequest(request).then(res => handleRedirect(policy, res, currentRetries + 1));\n  }\n\n  return Promise.resolve(response);\n} //# sourceMappingURL=redirectPolicy.js.map","map":null,"metadata":{},"sourceType":"module"}