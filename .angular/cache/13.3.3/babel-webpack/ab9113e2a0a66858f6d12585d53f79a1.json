{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n  constructor() {\n    /**\n     * Permission to access service level APIs granted.\n     */\n    this.service = false;\n    /**\n     * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n     */\n\n    this.container = false;\n    /**\n     * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n     */\n\n    this.object = false;\n  }\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n\n\n  static parse(resourceTypes) {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n\n    return accountSASResourceTypes;\n  }\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n\n\n  toString() {\n    const resourceTypes = [];\n\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n\n    return resourceTypes.join(\"\");\n  }\n\n} //# sourceMappingURL=AccountSASResourceTypes.js.map","map":null,"metadata":{},"sourceType":"module"}