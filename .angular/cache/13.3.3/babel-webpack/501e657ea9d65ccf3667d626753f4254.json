{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __asyncValues } from \"tslib\";\nimport { BlobServiceClient } from '@azure/storage-blob';\nimport * as i0 from \"@angular/core\";\nexport class BlobInService {\n  constructor() {\n    this.storageAccount = \"storagebap\";\n    this.storageContainer = \"bap-storage-container\";\n  }\n\n  listBlobs() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var e_1, _a;\n\n      let result = [];\n\n      let blobs = _this.containerClient().listBlobsFlat();\n\n      try {\n        for (var blobs_1 = __asyncValues(blobs), blobs_1_1; blobs_1_1 = yield blobs_1.next(), !blobs_1_1.done;) {\n          const blob = blobs_1_1.value;\n          result.push(blob.name);\n          result.push(blob.snapshot);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1.return)) yield _a.call(blobs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return result;\n    })();\n  }\n\n  containerClient() {\n    return new BlobServiceClient(`https://${this.storageAccount}.blob.core.windows.net?`).getContainerClient(this.storageContainer);\n  }\n\n}\n\nBlobInService.ɵfac = function BlobInService_Factory(t) {\n  return new (t || BlobInService)();\n};\n\nBlobInService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlobInService,\n  factory: BlobInService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/src/app/blob-in.service.ts"],"names":["__asyncValues","BlobServiceClient","i0","BlobInService","constructor","storageAccount","storageContainer","listBlobs","e_1","_a","result","blobs","containerClient","listBlobsFlat","blobs_1","blobs_1_1","next","done","blob","value","push","name","snapshot","e_1_1","error","return","call","getContainerClient","ɵfac","BlobInService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,GAAG;AACV,SAAKC,cAAL,GAAsB,YAAtB;AACA,SAAKC,gBAAL,GAAwB,uBAAxB;AACH;;AACKC,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,UAAIC,GAAJ,EAASC,EAAT;;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAIC,KAAK,GAAG,KAAI,CAACC,eAAL,GAAuBC,aAAvB,EAAZ;;AACA,UAAI;AACA,aAAK,IAAIC,OAAO,GAAGd,aAAa,CAACW,KAAD,CAA3B,EAAoCI,SAAzC,EAAoDA,SAAS,SAASD,OAAO,CAACE,IAAR,EAAlB,EAAkC,CAACD,SAAS,CAACE,IAAjG,GAAwG;AACpG,gBAAMC,IAAI,GAAGH,SAAS,CAACI,KAAvB;AACAT,UAAAA,MAAM,CAACU,IAAP,CAAYF,IAAI,CAACG,IAAjB;AACAX,UAAAA,MAAM,CAACU,IAAP,CAAYF,IAAI,CAACI,QAAjB;AACH;AACJ,OAND,CAOA,OAAOC,KAAP,EAAc;AAAEf,QAAAA,GAAG,GAAG;AAAEgB,UAAAA,KAAK,EAAED;AAAT,SAAN;AAAyB,OAPzC,SAQQ;AACJ,YAAI;AACA,cAAIR,SAAS,IAAI,CAACA,SAAS,CAACE,IAAxB,KAAiCR,EAAE,GAAGK,OAAO,CAACW,MAA9C,CAAJ,EAA2D,MAAMhB,EAAE,CAACiB,IAAH,CAAQZ,OAAR,CAAN;AAC9D,SAFD,SAGQ;AAAE,cAAIN,GAAJ,EAAS,MAAMA,GAAG,CAACgB,KAAV;AAAkB;AACxC;;AACD,aAAOd,MAAP;AAlBc;AAmBjB;;AACDE,EAAAA,eAAe,GAAG;AACd,WAAO,IAAIX,iBAAJ,CAAuB,WAAU,KAAKI,cAAe,yBAArD,EACFsB,kBADE,CACiB,KAAKrB,gBADtB,CAAP;AAEH;;AA5BsB;;AA8B3BH,aAAa,CAACyB,IAAd,GAAqB,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAE,SAAO,KAAKA,CAAC,IAAI3B,aAAV,GAAP;AAAoC,CAA7F;;AACAA,aAAa,CAAC4B,KAAd,GAAsB,aAAc7B,EAAE,CAAC8B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,aAAT;AAAwB+B,EAAAA,OAAO,EAAE/B,aAAa,CAACyB,IAA/C;AAAqDO,EAAAA,UAAU,EAAE;AAAjE,CAAtB,CAApC","sourcesContent":["import { __asyncValues } from \"tslib\";\r\nimport { BlobServiceClient } from '@azure/storage-blob';\r\nimport * as i0 from \"@angular/core\";\r\nexport class BlobInService {\r\n    constructor() {\r\n        this.storageAccount = \"storagebap\";\r\n        this.storageContainer = \"bap-storage-container\";\r\n    }\r\n    async listBlobs() {\r\n        var e_1, _a;\r\n        let result = [];\r\n        let blobs = this.containerClient().listBlobsFlat();\r\n        try {\r\n            for (var blobs_1 = __asyncValues(blobs), blobs_1_1; blobs_1_1 = await blobs_1.next(), !blobs_1_1.done;) {\r\n                const blob = blobs_1_1.value;\r\n                result.push(blob.name);\r\n                result.push(blob.snapshot);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1.return)) await _a.call(blobs_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return result;\r\n    }\r\n    containerClient() {\r\n        return new BlobServiceClient(`https://${this.storageAccount}.blob.core.windows.net?`)\r\n            .getContainerClient(this.storageContainer);\r\n    }\r\n}\r\nBlobInService.ɵfac = function BlobInService_Factory(t) { return new (t || BlobInService)(); };\r\nBlobInService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BlobInService, factory: BlobInService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}