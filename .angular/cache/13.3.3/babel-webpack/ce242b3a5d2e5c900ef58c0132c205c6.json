{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { getAuthority, getKnownAuthorities, MsalBaseUtilities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\n\nexport function defaultBrowserMsalConfig(options) {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin\n    }\n  };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\n\nexport class MsalBrowser extends MsalBaseUtilities {\n  constructor(options) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n\n    this.clientId = options.clientId;\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = Object.assign(Object.assign({}, options.authenticationRecord), {\n        tenantId: this.tenantId\n      });\n    }\n  }\n  /**\n   * In the browsers we don't need to init()\n   */\n\n\n  init() {// Nothing to do here.\n\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Clears MSAL's cache.\n   */\n\n\n  logout() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      (_a = _this.app) === null || _a === void 0 ? void 0 : _a.logout();\n    })();\n  }\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n\n\n  getToken(scopes, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const tenantId = processMultiTenantRequest(_this2.tenantId, options) || _this2.tenantId;\n\n      if (!options.authority) {\n        options.authority = getAuthority(tenantId, _this2.authorityHost);\n      } // We ensure that redirection is handled at this point.\n\n\n      yield _this2.handleRedirect();\n\n      if (!(yield _this2.getActiveAccount()) && !_this2.disableAutomaticAuthentication) {\n        yield _this2.login(scopes);\n      }\n\n      return _this2.getTokenSilent(scopes).catch(err => {\n        if (err.name !== \"AuthenticationRequiredError\") {\n          throw err;\n        }\n\n        if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n          throw new AuthenticationRequiredError({\n            scopes,\n            getTokenOptions: options,\n            message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n          });\n        }\n\n        _this2.logger.info(`Silent authentication failed, falling back to interactive method ${_this2.loginStyle}`);\n\n        return _this2.doGetToken(scopes);\n      });\n    })();\n  }\n\n} //# sourceMappingURL=msalBrowserCommon.js.map","map":null,"metadata":{},"sourceType":"module"}