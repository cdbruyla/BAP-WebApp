{"ast":null,"code":"/*! @azure/msal-browser v2.23.0 2022-04-04 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { SilentCacheClient } from '../interaction_client/SilentCacheClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache\n            });\n            atsMeasurement.flushMeasurement();\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              success: false\n            });\n            atsMeasurement.flushMeasurement();\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n          atsMeasurement.endMeasurement({\n            success: true\n          }); // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n\n          atsMeasurement.discardMeasurement();\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var astsAsyncMeasurement, silentCacheClient, silentRequest;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 1:\n            silentRequest = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            return [2\n            /*return*/\n            , silentCacheClient.acquireToken(silentRequest).then(function (result) {\n              astsAsyncMeasurement.endMeasurement({\n                success: true,\n                fromCache: result.fromCache\n              });\n              return result;\n            }).catch(function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var tokenRenewalResult, tokenRenewalError_1;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this.acquireTokenByRefreshToken(silentRequest)];\n\n                    case 1:\n                      tokenRenewalResult = _a.sent();\n                      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n                      astsAsyncMeasurement.endMeasurement({\n                        success: true,\n                        fromCache: tokenRenewalResult.fromCache\n                      });\n                      return [2\n                      /*return*/\n                      , tokenRenewalResult];\n\n                    case 2:\n                      tokenRenewalError_1 = _a.sent();\n                      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\n                      astsAsyncMeasurement.endMeasurement({\n                        success: false\n                      });\n                      throw tokenRenewalError_1;\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js"],"names":["__extends","__awaiter","__generator","__assign","PerformanceEvents","Constants","DEFAULT_REQUEST","InteractionType","ClientApplication","EventType","BrowserAuthError","SilentCacheClient","PublicClientApplication","_super","configuration","_this","call","activeSilentTokenRequests","Map","prototype","loginRedirect","request","correlationId","_a","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","loginPopup","acquireTokenPopup","acquireTokenSilent","atsMeasurement","account","thumbprint","silentRequestKey","cachedResponse","response","performanceClient","startMeasurement","AcquireTokenSilent","preflightBrowserEnvironmentCheck","Silent","getActiveAccount","createNoAccountError","clientId","config","auth","authority","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","JSON","stringify","get","acquireTokenSilentAsync","then","result","delete","endMeasurement","success","fromCache","flushMeasurement","catch","error","set","discardMeasurement","astsAsyncMeasurement","silentCacheClient","silentRequest","label","AcquireTokenSilentAsync","browserStorage","browserCrypto","eventHandler","navigationClient","initializeSilentRequest","sent","emitEvent","ACQUIRE_TOKEN_START","acquireToken","tokenRenewalResult","tokenRenewalError_1","trys","push","acquireTokenByRefreshToken","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,QAA5C,QAA4D,uBAA5D;AACA,SAASC,iBAAT,EAA4BC,SAA5B,QAA6C,oBAA7C;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,8BAAjD;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,iBAAT,QAAkC,4CAAlC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC3Db,EAAAA,SAAS,CAACY,uBAAD,EAA0BC,MAA1B,CAAT;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASD,uBAAT,CAAiCE,aAAjC,EAAgD;AAC5C,QAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,aAAlB,KAAoC,IAAhD;;AACAC,IAAAA,KAAK,CAACE,yBAAN,GAAkC,IAAIC,GAAJ,EAAlC;AACA,WAAOH,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,uBAAuB,CAACO,SAAxB,CAAkCC,aAAlC,GAAkD,UAAUC,OAAV,EAAmB;AACjE,WAAOpB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIqB,aAAJ;AACA,aAAOpB,WAAW,CAAC,IAAD,EAAO,UAAUqB,EAAV,EAAc;AACnCD,QAAAA,aAAa,GAAG,KAAKE,uBAAL,CAA6BH,OAA7B,CAAhB;AACA,aAAKI,MAAL,CAAYC,OAAZ,CAAoB,sBAApB,EAA4CJ,aAA5C;AACA,eAAO,CAAC;AAAE;AAAH,UAAe,KAAKK,oBAAL,CAA0BxB,QAAQ,CAAC;AAAEmB,UAAAA,aAAa,EAAEA;AAAjB,SAAD,EAAoCD,OAAO,IAAIf,eAA/C,CAAlC,CAAf,CAAP;AACH,OAJiB,CAAlB;AAKH,KAPe,CAAhB;AAQH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,uBAAuB,CAACO,SAAxB,CAAkCS,UAAlC,GAA+C,UAAUP,OAAV,EAAmB;AAC9D,QAAIC,aAAa,GAAG,KAAKE,uBAAL,CAA6BH,OAA7B,CAApB;AACA,SAAKI,MAAL,CAAYC,OAAZ,CAAoB,mBAApB,EAAyCJ,aAAzC;AACA,WAAO,KAAKO,iBAAL,CAAuB1B,QAAQ,CAAC;AAAEmB,MAAAA,aAAa,EAAEA;AAAjB,KAAD,EAAoCD,OAAO,IAAIf,eAA/C,CAA/B,CAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,uBAAuB,CAACO,SAAxB,CAAkCW,kBAAlC,GAAuD,UAAUT,OAAV,EAAmB;AACtE,WAAOpB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIqB,aAAJ,EAAmBS,cAAnB,EAAmCC,OAAnC,EAA4CC,UAA5C,EAAwDC,gBAAxD,EAA0EC,cAA1E,EAA0FC,QAA1F;;AACA,UAAIrB,KAAK,GAAG,IAAZ;;AACA,aAAOb,WAAW,CAAC,IAAD,EAAO,UAAUqB,EAAV,EAAc;AACnCD,QAAAA,aAAa,GAAG,KAAKE,uBAAL,CAA6BH,OAA7B,CAAhB;AACAU,QAAAA,cAAc,GAAG,KAAKM,iBAAL,CAAuBC,gBAAvB,CAAwClC,iBAAiB,CAACmC,kBAA1D,EAA8EjB,aAA9E,CAAjB;AACA,aAAKkB,gCAAL,CAAsCjC,eAAe,CAACkC,MAAtD;AACA,aAAKhB,MAAL,CAAYC,OAAZ,CAAoB,2BAApB,EAAiDJ,aAAjD;AACAU,QAAAA,OAAO,GAAGX,OAAO,CAACW,OAAR,IAAmB,KAAKU,gBAAL,EAA7B;;AACA,YAAI,CAACV,OAAL,EAAc;AACV,gBAAMtB,gBAAgB,CAACiC,oBAAjB,EAAN;AACH;;AACDV,QAAAA,UAAU,GAAG;AACTW,UAAAA,QAAQ,EAAE,KAAKC,MAAL,CAAYC,IAAZ,CAAiBF,QADlB;AAETG,UAAAA,SAAS,EAAE1B,OAAO,CAAC0B,SAAR,IAAqB1C,SAAS,CAAC2C,YAFjC;AAGTC,UAAAA,MAAM,EAAE5B,OAAO,CAAC4B,MAHP;AAITC,UAAAA,qBAAqB,EAAElB,OAAO,CAACmB,aAJtB;AAKTC,UAAAA,MAAM,EAAE/B,OAAO,CAAC+B,MALP;AAMTC,UAAAA,oBAAoB,EAAEhC,OAAO,CAACgC,oBANrB;AAOTC,UAAAA,qBAAqB,EAAEjC,OAAO,CAACiC,qBAPtB;AAQTC,UAAAA,kBAAkB,EAAElC,OAAO,CAACkC,kBARnB;AASTC,UAAAA,SAAS,EAAEnC,OAAO,CAACmC,SATV;AAUTC,UAAAA,MAAM,EAAEpC,OAAO,CAACoC;AAVP,SAAb;AAYAvB,QAAAA,gBAAgB,GAAGwB,IAAI,CAACC,SAAL,CAAe1B,UAAf,CAAnB;AACAE,QAAAA,cAAc,GAAG,KAAKlB,yBAAL,CAA+B2C,GAA/B,CAAmC1B,gBAAnC,CAAjB;;AACA,YAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;AACvC,eAAKV,MAAL,CAAYC,OAAZ,CAAoB,sEAApB,EAA4FJ,aAA5F;AACAc,UAAAA,QAAQ,GAAG,KAAKyB,uBAAL,CAA6B1D,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKkB,OAAL,CAAT,EAAwB;AAAEC,YAAAA,aAAa,EAAEA;AAAjB,WAAxB,CAArC,EAAgGU,OAAhG,EACN8B,IADM,CACD,UAAUC,MAAV,EAAkB;AACxBhD,YAAAA,KAAK,CAACE,yBAAN,CAAgC+C,MAAhC,CAAuC9B,gBAAvC;;AACAH,YAAAA,cAAc,CAACkC,cAAf,CAA8B;AAC1BC,cAAAA,OAAO,EAAE,IADiB;AAE1BC,cAAAA,SAAS,EAAEJ,MAAM,CAACI;AAFQ,aAA9B;AAIApC,YAAAA,cAAc,CAACqC,gBAAf;AACA,mBAAOL,MAAP;AACH,WATU,EAUNM,KAVM,CAUA,UAAUC,KAAV,EAAiB;AACxBvD,YAAAA,KAAK,CAACE,yBAAN,CAAgC+C,MAAhC,CAAuC9B,gBAAvC;;AACAH,YAAAA,cAAc,CAACkC,cAAf,CAA8B;AAC1BC,cAAAA,OAAO,EAAE;AADiB,aAA9B;AAGAnC,YAAAA,cAAc,CAACqC,gBAAf;AACA,kBAAME,KAAN;AACH,WAjBU,CAAX;AAkBA,eAAKrD,yBAAL,CAA+BsD,GAA/B,CAAmCrC,gBAAnC,EAAqDE,QAArD;AACA,iBAAO,CAAC;AAAE;AAAH,YAAeA,QAAf,CAAP;AACH,SAtBD,MAuBK;AACD,eAAKX,MAAL,CAAYC,OAAZ,CAAoB,yFAApB,EAA+GJ,aAA/G;AACAS,UAAAA,cAAc,CAACkC,cAAf,CAA8B;AAC1BC,YAAAA,OAAO,EAAE;AADiB,WAA9B,EAFC,CAKD;;AACAnC,UAAAA,cAAc,CAACyC,kBAAf;AACA,iBAAO,CAAC;AAAE;AAAH,YAAerC,cAAf,CAAP;AACH;AACJ,OAvDiB,CAAlB;AAwDH,KA3De,CAAhB;AA4DH,GA7DD;AA8DA;AACJ;AACA;AACA;AACA;AACA;;;AACIvB,EAAAA,uBAAuB,CAACO,SAAxB,CAAkC0C,uBAAlC,GAA4D,UAAUxC,OAAV,EAAmBW,OAAnB,EAA4B;AACpF,WAAO/B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIwE,oBAAJ,EAA0BC,iBAA1B,EAA6CC,aAA7C;;AACA,UAAI5D,KAAK,GAAG,IAAZ;;AACA,aAAOb,WAAW,CAAC,IAAD,EAAO,UAAUqB,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAACqD,KAAX;AACI,eAAK,CAAL;AACIH,YAAAA,oBAAoB,GAAG,KAAKpC,iBAAL,CAAuBC,gBAAvB,CAAwClC,iBAAiB,CAACyE,uBAA1D,EAAmFxD,OAAO,CAACC,aAA3F,CAAvB;AACAoD,YAAAA,iBAAiB,GAAG,IAAI/D,iBAAJ,CAAsB,KAAKkC,MAA3B,EAAmC,KAAKiC,cAAxC,EAAwD,KAAKC,aAA7D,EAA4E,KAAKtD,MAAjF,EAAyF,KAAKuD,YAA9F,EAA4G,KAAKC,gBAAjH,EAAmI,KAAK5C,iBAAxI,EAA2JhB,OAAO,CAACC,aAAnK,CAApB;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcoD,iBAAiB,CAACQ,uBAAlB,CAA0C7D,OAA1C,EAAmDW,OAAnD,CAAd,CAAP;;AACJ,eAAK,CAAL;AACI2C,YAAAA,aAAa,GAAGpD,EAAE,CAAC4D,IAAH,EAAhB;AACA,iBAAKH,YAAL,CAAkBI,SAAlB,CAA4B3E,SAAS,CAAC4E,mBAAtC,EAA2D9E,eAAe,CAACkC,MAA3E,EAAmFpB,OAAnF;AACA,mBAAO,CAAC;AAAE;AAAH,cAAeqD,iBAAiB,CAACY,YAAlB,CAA+BX,aAA/B,EACbb,IADa,CACR,UAAUC,MAAV,EAAkB;AACxBU,cAAAA,oBAAoB,CAACR,cAArB,CAAoC;AAChCC,gBAAAA,OAAO,EAAE,IADuB;AAEhCC,gBAAAA,SAAS,EAAEJ,MAAM,CAACI;AAFc,eAApC;AAIA,qBAAOJ,MAAP;AACH,aAPiB,EAQbM,KARa,CAQP,YAAY;AAAE,qBAAOpE,SAAS,CAACc,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;AACzE,oBAAIwE,kBAAJ,EAAwBC,mBAAxB;AACA,uBAAOtF,WAAW,CAAC,IAAD,EAAO,UAAUqB,EAAV,EAAc;AACnC,0BAAQA,EAAE,CAACqD,KAAX;AACI,yBAAK,CAAL;AACIrD,sBAAAA,EAAE,CAACkE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;AACA,6BAAO,CAAC;AAAE;AAAH,wBAAc,KAAKC,0BAAL,CAAgChB,aAAhC,CAAd,CAAP;;AACJ,yBAAK,CAAL;AACIY,sBAAAA,kBAAkB,GAAGhE,EAAE,CAAC4D,IAAH,EAArB;AACA,2BAAKH,YAAL,CAAkBI,SAAlB,CAA4B3E,SAAS,CAACmF,qBAAtC,EAA6DrF,eAAe,CAACkC,MAA7E,EAAqF8C,kBAArF;AACAd,sBAAAA,oBAAoB,CAACR,cAArB,CAAoC;AAChCC,wBAAAA,OAAO,EAAE,IADuB;AAEhCC,wBAAAA,SAAS,EAAEoB,kBAAkB,CAACpB;AAFE,uBAApC;AAIA,6BAAO,CAAC;AAAE;AAAH,wBAAeoB,kBAAf,CAAP;;AACJ,yBAAK,CAAL;AACIC,sBAAAA,mBAAmB,GAAGjE,EAAE,CAAC4D,IAAH,EAAtB;AACA,2BAAKH,YAAL,CAAkBI,SAAlB,CAA4B3E,SAAS,CAACoF,qBAAtC,EAA6DtF,eAAe,CAACkC,MAA7E,EAAqF,IAArF,EAA2F+C,mBAA3F;AACAf,sBAAAA,oBAAoB,CAACR,cAArB,CAAoC;AAChCC,wBAAAA,OAAO,EAAE;AADuB,uBAApC;AAGA,4BAAMsB,mBAAN;;AACJ,yBAAK,CAAL;AAAQ,6BAAO,CAAC;AAAE;AAAH,uBAAP;AAnBZ;AAqBH,iBAtBiB,CAAlB;AAuBH,eAzBwC,CAAhB;AAyBpB,aAjCa,CAAf,CAAP;AARR;AA2CH,OA5CiB,CAAlB;AA6CH,KAhDe,CAAhB;AAiDH,GAlDD;;AAmDA,SAAO5E,uBAAP;AACH,CAzL4C,CAyL3CJ,iBAzL2C,CAA7C;;AA2LA,SAASI,uBAAT","sourcesContent":["/*! @azure/msal-browser v2.23.0 2022-04-04 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { SilentCacheClient } from '../interaction_client/SilentCacheClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nvar PublicClientApplication = /** @class */ (function (_super) {\r\n    __extends(PublicClientApplication, _super);\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    function PublicClientApplication(configuration) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        _this.activeSilentTokenRequests = new Map();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    PublicClientApplication.prototype.loginRedirect = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId;\r\n            return __generator(this, function (_a) {\r\n                correlationId = this.getRequestCorrelationId(request);\r\n                this.logger.verbose(\"loginRedirect called\", correlationId);\r\n                return [2 /*return*/, this.acquireTokenRedirect(__assign({ correlationId: correlationId }, (request || DEFAULT_REQUEST)))];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    PublicClientApplication.prototype.loginPopup = function (request) {\r\n        var correlationId = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginPopup called\", correlationId);\r\n        return this.acquireTokenPopup(__assign({ correlationId: correlationId }, (request || DEFAULT_REQUEST)));\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilent = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                correlationId = this.getRequestCorrelationId(request);\r\n                atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\r\n                this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n                this.logger.verbose(\"acquireTokenSilent called\", correlationId);\r\n                account = request.account || this.getActiveAccount();\r\n                if (!account) {\r\n                    throw BrowserAuthError.createNoAccountError();\r\n                }\r\n                thumbprint = {\r\n                    clientId: this.config.auth.clientId,\r\n                    authority: request.authority || Constants.EMPTY_STRING,\r\n                    scopes: request.scopes,\r\n                    homeAccountIdentifier: account.homeAccountId,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                silentRequestKey = JSON.stringify(thumbprint);\r\n                cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n                if (typeof cachedResponse === \"undefined\") {\r\n                    this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\r\n                    response = this.acquireTokenSilentAsync(__assign(__assign({}, request), { correlationId: correlationId }), account)\r\n                        .then(function (result) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        atsMeasurement.endMeasurement({\r\n                            success: true,\r\n                            fromCache: result.fromCache\r\n                        });\r\n                        atsMeasurement.flushMeasurement();\r\n                        return result;\r\n                    })\r\n                        .catch(function (error) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        atsMeasurement.endMeasurement({\r\n                            success: false\r\n                        });\r\n                        atsMeasurement.flushMeasurement();\r\n                        throw error;\r\n                    });\r\n                    this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n                    return [2 /*return*/, response];\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\r\n                    atsMeasurement.endMeasurement({\r\n                        success: true\r\n                    });\r\n                    // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\r\n                    atsMeasurement.discardMeasurement();\r\n                    return [2 /*return*/, cachedResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var astsAsyncMeasurement, silentCacheClient, silentRequest;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n                        silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, request.correlationId);\r\n                        return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];\r\n                    case 1:\r\n                        silentRequest = _a.sent();\r\n                        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n                        return [2 /*return*/, silentCacheClient.acquireToken(silentRequest)\r\n                                .then(function (result) {\r\n                                astsAsyncMeasurement.endMeasurement({\r\n                                    success: true,\r\n                                    fromCache: result.fromCache\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                                var tokenRenewalResult, tokenRenewalError_1;\r\n                                return __generator(this, function (_a) {\r\n                                    switch (_a.label) {\r\n                                        case 0:\r\n                                            _a.trys.push([0, 2, , 3]);\r\n                                            return [4 /*yield*/, this.acquireTokenByRefreshToken(silentRequest)];\r\n                                        case 1:\r\n                                            tokenRenewalResult = _a.sent();\r\n                                            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\r\n                                            astsAsyncMeasurement.endMeasurement({\r\n                                                success: true,\r\n                                                fromCache: tokenRenewalResult.fromCache\r\n                                            });\r\n                                            return [2 /*return*/, tokenRenewalResult];\r\n                                        case 2:\r\n                                            tokenRenewalError_1 = _a.sent();\r\n                                            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\r\n                                            astsAsyncMeasurement.endMeasurement({\r\n                                                success: false\r\n                                            });\r\n                                            throw tokenRenewalError_1;\r\n                                        case 3: return [2 /*return*/];\r\n                                    }\r\n                                });\r\n                            }); })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PublicClientApplication;\r\n}(ClientApplication));\n\nexport { PublicClientApplication };\n"]},"metadata":{},"sourceType":"module"}