{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { getAuthority, getKnownAuthorities, MsalBaseUtilities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\n\nexport function defaultBrowserMsalConfig(options) {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin\n    }\n  };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\n\nexport class MsalBrowser extends MsalBaseUtilities {\n  constructor(options) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n\n    this.clientId = options.clientId;\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = Object.assign(Object.assign({}, options.authenticationRecord), {\n        tenantId: this.tenantId\n      });\n    }\n  }\n  /**\n   * In the browsers we don't need to init()\n   */\n\n\n  init() {// Nothing to do here.\n\n    return _asyncToGenerator(function* () {})();\n  }\n  /**\n   * Clears MSAL's cache.\n   */\n\n\n  logout() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      (_a = _this.app) === null || _a === void 0 ? void 0 : _a.logout();\n    })();\n  }\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n\n\n  getToken(scopes, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const tenantId = processMultiTenantRequest(_this2.tenantId, options) || _this2.tenantId;\n\n      if (!options.authority) {\n        options.authority = getAuthority(tenantId, _this2.authorityHost);\n      } // We ensure that redirection is handled at this point.\n\n\n      yield _this2.handleRedirect();\n\n      if (!(yield _this2.getActiveAccount()) && !_this2.disableAutomaticAuthentication) {\n        yield _this2.login(scopes);\n      }\n\n      return _this2.getTokenSilent(scopes).catch(err => {\n        if (err.name !== \"AuthenticationRequiredError\") {\n          throw err;\n        }\n\n        if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n          throw new AuthenticationRequiredError({\n            scopes,\n            getTokenOptions: options,\n            message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n          });\n        }\n\n        _this2.logger.info(`Silent authentication failed, falling back to interactive method ${_this2.loginStyle}`);\n\n        return _this2.doGetToken(scopes);\n      });\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/identity/dist-esm/src/msal/browserFlows/msalBrowserCommon.js"],"names":["DefaultTenantId","resolveTenantId","processMultiTenantRequest","AuthenticationRequiredError","CredentialUnavailableError","getAuthority","getKnownAuthorities","MsalBaseUtilities","defaultBrowserMsalConfig","options","tenantId","authority","authorityHost","auth","clientId","knownAuthorities","redirectUri","self","location","origin","MsalBrowser","constructor","logger","loginStyle","msalConfig","disableAutomaticAuthentication","authenticationRecord","account","Object","assign","init","logout","_a","app","getToken","scopes","handleRedirect","getActiveAccount","login","getTokenSilent","catch","err","name","getTokenOptions","message","info","doGetToken"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { getAuthority, getKnownAuthorities, MsalBaseUtilities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(options) {\n    const tenantId = options.tenantId || DefaultTenantId;\n    const authority = getAuthority(tenantId, options.authorityHost);\n    return {\n        auth: {\n            clientId: options.clientId,\n            authority,\n            knownAuthorities: getKnownAuthorities(tenantId, authority),\n            // If the users picked redirect as their login style,\n            // but they didn't provide a redirectUri,\n            // we can try to use the current page we're in as a default value.\n            redirectUri: options.redirectUri || self.location.origin,\n        },\n    };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport class MsalBrowser extends MsalBaseUtilities {\n    constructor(options) {\n        super(options);\n        this.logger = options.logger;\n        this.loginStyle = options.loginStyle;\n        if (!options.clientId) {\n            throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n        }\n        this.clientId = options.clientId;\n        this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n        this.authorityHost = options.authorityHost;\n        this.msalConfig = defaultBrowserMsalConfig(options);\n        this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n        if (options.authenticationRecord) {\n            this.account = Object.assign(Object.assign({}, options.authenticationRecord), { tenantId: this.tenantId });\n        }\n    }\n    /**\n     * In the browsers we don't need to init()\n     */\n    async init() {\n        // Nothing to do here.\n    }\n    /**\n     * Clears MSAL's cache.\n     */\n    async logout() {\n        var _a;\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.logout();\n    }\n    /**\n     * Attempts to retrieve an authenticated token from MSAL.\n     */\n    async getToken(scopes, options = {}) {\n        const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n        if (!options.authority) {\n            options.authority = getAuthority(tenantId, this.authorityHost);\n        }\n        // We ensure that redirection is handled at this point.\n        await this.handleRedirect();\n        if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n            await this.login(scopes);\n        }\n        return this.getTokenSilent(scopes).catch((err) => {\n            if (err.name !== \"AuthenticationRequiredError\") {\n                throw err;\n            }\n            if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n                throw new AuthenticationRequiredError({\n                    scopes,\n                    getTokenOptions: options,\n                    message: \"Automatic authentication has been disabled. You may call the authentication() method.\",\n                });\n            }\n            this.logger.info(`Silent authentication failed, falling back to interactive method ${this.loginStyle}`);\n            return this.doGetToken(scopes);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}