{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Sanitizer } from \"./util/sanitizer\";\nimport { custom } from \"./util/inspect\";\nconst errorSanitizer = new Sanitizer();\n/**\n * An error resulting from an HTTP request to a service endpoint.\n */\n\nexport let RestError = /*#__PURE__*/(() => {\n  class RestError extends Error {\n    constructor(message, code, statusCode, request, response) {\n      super(message);\n      this.name = \"RestError\";\n      this.code = code;\n      this.statusCode = statusCode;\n      this.request = request;\n      this.response = response;\n      Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n\n\n    [custom]() {\n      return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n\n  }\n\n  /**\n   * A constant string to identify errors that may arise when making an HTTP request that indicates an issue with the transport layer (e.g. the hostname of the URL cannot be resolved via DNS.)\n   */\n  //# sourceMappingURL=restError.js.map\n  RestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n  /**\n   * A constant string to identify errors that may arise from parsing an incoming HTTP response. Usually indicates a malformed HTTP body, such as an encoded JSON payload that is incomplete.\n   */\n\n  RestError.PARSE_ERROR = \"PARSE_ERROR\";\n  return RestError;\n})();","map":null,"metadata":{},"sourceType":"module"}