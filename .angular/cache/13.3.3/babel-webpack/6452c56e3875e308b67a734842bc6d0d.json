{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder } from \"@azure/core-http\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { delay } from \"@azure/core-http\";\n/**\n * A set of constants used internally when processing requests.\n */\n\nconst Constants = {\n  DefaultScope: \"/.default\",\n\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\"\n  }\n}; // Default options for the cycler if none are provided\n\nconst DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\n\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\n\n\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator(function* (getAccessToken, retryIntervalInMs, timeoutInMs) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    function tryGetAccessToken() {\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    function _tryGetAccessToken() {\n      _tryGetAccessToken = _asyncToGenerator(function* () {\n        if (Date.now() < timeoutInMs) {\n          try {\n            return yield getAccessToken();\n          } catch (_a) {\n            return null;\n          }\n        } else {\n          const finalToken = yield getAccessToken(); // Timeout is up, so throw if it's still null\n\n          if (finalToken === null) {\n            throw new Error(\"Failed to refresh access token.\");\n          }\n\n          return finalToken;\n        }\n      });\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    let token = yield tryGetAccessToken();\n\n    while (token === null) {\n      yield delay(retryIntervalInMs);\n      token = yield tryGetAccessToken();\n    }\n\n    return token;\n  });\n  return _beginRefresh.apply(this, arguments);\n}\n\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n\n  function refresh(getTokenOptions) {\n    var _a;\n\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions); // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n\n\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n\n    return refreshWorker;\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (tokenOptions) {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      if (cycler.mustRefresh) return refresh(tokenOptions);\n\n      if (cycler.shouldRefresh) {\n        refresh(tokenOptions);\n      }\n\n      return token;\n    });\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\n\n\nfunction getChallenge(response) {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n\n  return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\n\n\nfunction parseChallenge(challenge) {\n  const bearerChallenge = challenge.slice(\"Bearer \".length);\n  const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter(x => x);\n  const keyValuePairs = challengeParts.map(keyValue => (([key, value]) => ({\n    [key]: value\n  }))(keyValue.trim().split(\"=\"))); // Key-value pairs to plain object:\n\n  return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});\n} // #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\n\n\nexport function storageBearerTokenChallengeAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  let getToken = createTokenCycler(credential, scopes);\n\n  class StorageBearerTokenChallengeAuthenticationPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options) {\n      super(nextPolicy, options);\n    }\n\n    sendRequest(webResource) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n          throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n        }\n\n        const getTokenInternal = getToken;\n        const token = (yield getTokenInternal({\n          abortSignal: webResource.abortSignal,\n          tracingOptions: {\n            tracingContext: webResource.tracingContext\n          }\n        })).token;\n        webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n        const response = yield _this._nextPolicy.sendRequest(webResource);\n\n        if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n          const challenge = getChallenge(response);\n\n          if (challenge) {\n            const challengeInfo = parseChallenge(challenge);\n            const challengeScopes = challengeInfo.resource_id + Constants.DefaultScope;\n            const parsedAuthUri = URLBuilder.parse(challengeInfo.authorization_uri);\n            const pathSegments = parsedAuthUri.getPath().split(\"/\");\n            const tenantId = pathSegments[1];\n            const getTokenForChallenge = createTokenCycler(credential, challengeScopes);\n            const tokenForChallenge = (yield getTokenForChallenge({\n              abortSignal: webResource.abortSignal,\n              tracingOptions: {\n                tracingContext: webResource.tracingContext\n              },\n              tenantId: tenantId\n            })).token;\n            getToken = getTokenForChallenge;\n            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${tokenForChallenge}`);\n            return _this._nextPolicy.sendRequest(webResource);\n          }\n        }\n\n        return response;\n      })();\n    }\n\n  }\n\n  return {\n    create: (nextPolicy, options) => {\n      return new StorageBearerTokenChallengeAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n} //# sourceMappingURL=StorageBearerTokenChallengeAuthenticationPolicy.js.map","map":null,"metadata":{},"sourceType":"module"}