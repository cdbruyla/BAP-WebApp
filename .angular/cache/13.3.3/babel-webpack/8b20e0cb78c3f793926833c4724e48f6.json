{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map) {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl {\n  constructor(rawHeaders) {\n    this._headersMap = new Map();\n\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n\n\n  set(name, value) {\n    this._headersMap.set(normalizeName(name), {\n      name,\n      value: String(value)\n    });\n  }\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n\n\n  get(name) {\n    var _a;\n\n    return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n\n\n  has(name) {\n    return this._headersMap.has(normalizeName(name));\n  }\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n\n\n  delete(name) {\n    this._headersMap.delete(normalizeName(name));\n  }\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n\n\n  toJSON(options = {}) {\n    const result = {};\n\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON({\n      preserveCase: true\n    }));\n  }\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n\n\n  [Symbol.iterator]() {\n    return headerIterator(this._headersMap);\n  }\n\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\n\n\nexport function createHttpHeaders(rawHeaders) {\n  return new HttpHeadersImpl(rawHeaders);\n} //# sourceMappingURL=httpHeaders.js.map","map":null,"metadata":{},"sourceType":"module"}