{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpPipelineLogLevel } from \"../httpPipelineLogLevel\";\n/**\n * The base class from which all request policies derive.\n */\n\nexport class BaseRequestPolicy {\n  /**\n   * The main method to implement that manipulates a request/response.\n   */\n  constructor(\n  /**\n   * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n   */\n  _nextPolicy,\n  /**\n   * The options that can be passed to a given request policy.\n   */\n  _options) {\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  shouldLog(logLevel) {\n    return this._options.shouldLog(logLevel);\n  }\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meat the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n\n\n  log(logLevel, message) {\n    this._options.log(logLevel, message);\n  }\n\n}\n/**\n * Optional properties that can be used when creating a RequestPolicy.\n */\n\nexport class RequestPolicyOptions {\n  constructor(_logger) {\n    this._logger = _logger;\n  }\n  /**\n   * Get whether or not a log with the provided log level should be logged.\n   * @param logLevel - The log level of the log that will be logged.\n   * @returns Whether or not a log with the provided log level should be logged.\n   */\n\n\n  shouldLog(logLevel) {\n    return !!this._logger && logLevel !== HttpPipelineLogLevel.OFF && logLevel <= this._logger.minimumLogLevel;\n  }\n  /**\n   * Attempt to log the provided message to the provided logger. If no logger was provided or if\n   * the log level does not meet the logger's threshold, then nothing will be logged.\n   * @param logLevel - The log level of this log.\n   * @param message - The message of this log.\n   */\n\n\n  log(logLevel, message) {\n    if (this._logger && this.shouldLog(logLevel)) {\n      this._logger.log(logLevel, message);\n    }\n  }\n\n} //# sourceMappingURL=requestPolicy.js.map","map":null,"metadata":{},"sourceType":"module"}