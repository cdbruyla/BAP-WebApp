{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Defines the default token refresh buffer duration.\n */\nexport const TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n\n/**\n * Provides an {@link AccessTokenCache} implementation which clears\n * the cached {@link AccessToken}'s after the expiresOnTimestamp has\n * passed.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\n\nexport class ExpiringAccessTokenCache {\n  /**\n   * Constructs an instance of {@link ExpiringAccessTokenCache} with\n   * an optional expiration buffer time.\n   */\n  constructor(tokenRefreshBufferMs = TokenRefreshBufferMs) {\n    this.cachedToken = undefined;\n    this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n  }\n  /**\n   * Saves an access token into the internal in-memory cache.\n   * @param accessToken - Access token or undefined to clear the cache.\n   */\n\n\n  setCachedToken(accessToken) {\n    this.cachedToken = accessToken;\n  }\n  /**\n   * Returns the cached access token, or `undefined` if one is not cached or the cached one is expiring soon.\n   */\n\n\n  getCachedToken() {\n    if (this.cachedToken && Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {\n      this.cachedToken = undefined;\n    }\n\n    return this.cachedToken;\n  }\n\n} //# sourceMappingURL=accessTokenCache.js.map","map":null,"metadata":{},"sourceType":"module"}