{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { createSpan } from \"../util/tracing\";\nconst logger = credentialLogger(\"ClientSecretCredential\"); // This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\n\nexport class ClientSecretCredential {\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantId, clientId, clientSecret, options) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n\n\n  getToken(scopes, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions: newOptions\n      } = createSpan(`${_this.constructor.name}.getToken`, options);\n      const query = new URLSearchParams({\n        response_type: \"token\",\n        grant_type: \"client_credentials\",\n        client_id: _this.clientId,\n        client_secret: _this.clientSecret,\n        scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n      });\n\n      try {\n        const urlSuffix = getIdentityTokenEndpointSuffix(_this.tenantId);\n        const request = createPipelineRequest({\n          url: `${_this.identityClient.authorityHost}/${_this.tenantId}/${urlSuffix}`,\n          method: \"POST\",\n          body: query.toString(),\n          headers: createHttpHeaders({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }),\n          abortSignal: options && options.abortSignal,\n          tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions\n        });\n        const tokenResponse = yield _this.identityClient.sendTokenRequest(request);\n        logger.getToken.info(formatSuccess(scopes));\n        return tokenResponse && tokenResponse.accessToken || null;\n      } catch (err) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: err.message\n        });\n        logger.getToken.info(formatError(scopes, err));\n        throw err;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n\n} //# sourceMappingURL=clientSecretCredential.browser.js.map","map":null,"metadata":{},"sourceType":"module"}