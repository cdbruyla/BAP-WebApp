{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { failureStates, successStates } from \"./models\";\nimport { isUnexpectedPollingResponse } from \"./requestUtils\";\n\nfunction getProvisioningState(rawResponse) {\n  var _a, _b;\n\n  const {\n    properties,\n    provisioningState\n  } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n  const state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n  return typeof state === \"string\" ? state.toLowerCase() : \"succeeded\";\n}\n\nexport function isBodyPollingDone(rawResponse) {\n  const state = getProvisioningState(rawResponse);\n\n  if (isUnexpectedPollingResponse(rawResponse) || failureStates.includes(state)) {\n    throw new Error(`The long running operation has failed. The provisioning state: ${state}.`);\n  }\n\n  return successStates.includes(state);\n}\n/**\n * Creates a polling strategy based on BodyPolling which uses the provisioning state\n * from the result to determine the current operation state\n */\n\nexport function processBodyPollingOperationResult(response) {\n  return Object.assign(Object.assign({}, response), {\n    done: isBodyPollingDone(response.rawResponse)\n  });\n} //# sourceMappingURL=bodyPolling.js.map","map":null,"metadata":{},"sourceType":"module"}