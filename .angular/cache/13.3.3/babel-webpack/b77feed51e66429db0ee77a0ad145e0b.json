{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getRandomIntegerInclusive } from \"../util/helpers\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy\"; // intervals are in milliseconds\n\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\n\nexport function exponentialRetryStrategy(options = {}) {\n  var _a, _b;\n\n  const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  let retryAfterInMs = retryInterval;\n  return {\n    name: \"exponentialRetryStrategy\",\n\n    retry({\n      retryCount,\n      response,\n      responseError\n    }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return {\n          skipStrategy: true\n        };\n      }\n\n      if (responseError && !matchedSystemError && !isExponential) {\n        return {\n          errorToThrow: responseError\n        };\n      } // Exponentially increase the delay each time\n\n\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount); // Don't let the delay exceed the maximum\n\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay); // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n\n      retryAfterInMs = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return {\n        retryAfterInMs\n      };\n    }\n\n  };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\n\nexport function isExponentialRetryResponse(response) {\n  return Boolean(response && response.status !== undefined && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\n\nexport function isSystemError(err) {\n  if (!err) {\n    return false;\n  }\n\n  return err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" || err.code === \"ECONNRESET\" || err.code === \"ENOENT\";\n} //# sourceMappingURL=exponentialRetryStrategy.js.map","map":null,"metadata":{},"sourceType":"module"}