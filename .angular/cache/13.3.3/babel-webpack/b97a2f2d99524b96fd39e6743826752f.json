{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"@azure/core-http\";\nimport { Poller } from \"@azure/core-lro\";\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\n\nexport class BlobBeginCopyFromUrlPoller extends Poller {\n  constructor(options) {\n    const {\n      blobClient,\n      copySource,\n      intervalInMs = 15000,\n      onProgress,\n      resumeFrom,\n      startCopyFromURLOptions\n    } = options;\n    let state;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), {\n      blobClient,\n      copySource,\n      startCopyFromURLOptions\n    }));\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  delay() {\n    return delay(this.intervalInMs);\n  }\n\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\n\nconst cancel = /*#__PURE__*/function () {\n  var _cancel = _asyncToGenerator(function* (options = {}) {\n    const state = this.state;\n    const {\n      copyId\n    } = state;\n\n    if (state.isCompleted) {\n      return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n\n    if (!copyId) {\n      state.isCancelled = true;\n      return makeBlobBeginCopyFromURLPollOperation(state);\n    } // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n\n\n    yield state.blobClient.abortCopyFromURL(copyId, {\n      abortSignal: options.abortSignal\n    });\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  });\n\n  function cancel() {\n    return _cancel.apply(this, arguments);\n  }\n\n  return cancel;\n}();\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\n\n\nconst update = /*#__PURE__*/function () {\n  var _update = _asyncToGenerator(function* (options = {}) {\n    const state = this.state;\n    const {\n      blobClient,\n      copySource,\n      startCopyFromURLOptions\n    } = state;\n\n    if (!state.isStarted) {\n      state.isStarted = true;\n      const result = yield blobClient.startCopyFromURL(copySource, startCopyFromURLOptions); // copyId is needed to abort\n\n      state.copyId = result.copyId;\n\n      if (result.copyStatus === \"success\") {\n        state.result = result;\n        state.isCompleted = true;\n      }\n    } else if (!state.isCompleted) {\n      try {\n        const result = yield state.blobClient.getProperties({\n          abortSignal: options.abortSignal\n        });\n        const {\n          copyStatus,\n          copyProgress\n        } = result;\n        const prevCopyProgress = state.copyProgress;\n\n        if (copyProgress) {\n          state.copyProgress = copyProgress;\n        }\n\n        if (copyStatus === \"pending\" && copyProgress !== prevCopyProgress && typeof options.fireProgress === \"function\") {\n          // trigger in setTimeout, or swallow error?\n          options.fireProgress(state);\n        } else if (copyStatus === \"success\") {\n          state.result = result;\n          state.isCompleted = true;\n        } else if (copyStatus === \"failed\") {\n          state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n          state.isCompleted = true;\n        }\n      } catch (err) {\n        state.error = err;\n        state.isCompleted = true;\n      }\n    }\n\n    return makeBlobBeginCopyFromURLPollOperation(state);\n  });\n\n  function update() {\n    return _update.apply(this, arguments);\n  }\n\n  return update;\n}();\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\n\n\nconst toString = function toString() {\n  return JSON.stringify({\n    state: this.state\n  }, (key, value) => {\n    // remove blobClient from serialized state since a client can't be hydrated from this info.\n    if (key === \"blobClient\") {\n      return undefined;\n    }\n\n    return value;\n  });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\n\n\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n  return {\n    state: Object.assign({}, state),\n    cancel,\n    toString,\n    update\n  };\n} //# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map","map":null,"metadata":{},"sourceType":"module"}