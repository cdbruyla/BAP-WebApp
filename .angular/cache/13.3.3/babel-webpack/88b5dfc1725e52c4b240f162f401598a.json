{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\n/**\n * The AzureLogger used for all clients within the identity package\n */\n\nexport const logger = createClientLogger(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\n\nexport function processEnvVars(supportedEnvVars) {\n  return supportedEnvVars.reduce((acc, envVariable) => {\n    if (process.env[envVariable]) {\n      acc.assigned.push(envVariable);\n    } else {\n      acc.missing.push(envVariable);\n    }\n\n    return acc;\n  }, {\n    missing: [],\n    assigned: []\n  });\n}\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\n\nexport function logEnvVars(credentialName, supportedEnvVars) {\n  const {\n    assigned\n  } = processEnvVars(supportedEnvVars);\n  logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`);\n}\n/**\n * Formatting the success event on the credentials\n */\n\nexport function formatSuccess(scope) {\n  return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */\n\nexport function formatError(scope, error) {\n  let message = \"ERROR.\";\n\n  if (scope === null || scope === void 0 ? void 0 : scope.length) {\n    message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n  }\n\n  return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\n\nexport function credentialLoggerInstance(title, parent, log = logger) {\n  const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n\n  function info(message) {\n    log.info(`${fullTitle} =>`, message);\n  }\n\n  function warning(message) {\n    log.warning(`${fullTitle} =>`, message);\n  }\n\n  return {\n    title,\n    fullTitle,\n    info,\n    warning\n  };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\n\nexport function credentialLogger(title, log = logger) {\n  const credLogger = credentialLoggerInstance(title, undefined, log);\n  return Object.assign(Object.assign({}, credLogger), {\n    parent: log,\n    getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log)\n  });\n} //# sourceMappingURL=logging.js.map","map":null,"metadata":{},"sourceType":"module"}