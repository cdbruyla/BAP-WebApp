{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\GitHub\\\\Private\\\\Angular_WebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\n/**\n * A policy that encodes FormData on the request into the body.\n */\n\nexport function formDataPolicy() {\n  return {\n    name: formDataPolicyName,\n\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        if (request.formData) {\n          const formData = request.formData;\n          const requestForm = new FormData();\n\n          for (const formKey of Object.keys(formData)) {\n            const formValue = formData[formKey];\n\n            if (Array.isArray(formValue)) {\n              for (const subValue of formValue) {\n                requestForm.append(formKey, subValue);\n              }\n            } else {\n              requestForm.append(formKey, formValue);\n            }\n          }\n\n          request.body = requestForm;\n          request.formData = undefined;\n          const contentType = request.headers.get(\"Content-Type\");\n\n          if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n            request.body = new URLSearchParams(requestForm).toString();\n          } else if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n            // browser will automatically apply a suitable content-type header\n            request.headers.delete(\"Content-Type\");\n          }\n        }\n\n        return next(request);\n      })();\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/GitHub/Private/Angular_WebApp/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/formDataPolicy.browser.js"],"names":["formDataPolicyName","formDataPolicy","name","sendRequest","request","next","formData","requestForm","FormData","formKey","Object","keys","formValue","Array","isArray","subValue","append","body","undefined","contentType","headers","get","indexOf","URLSearchParams","toString","delete"],"mappings":";AAAA;AACA;;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAG,gBAA3B;AACP;AACA;AACA;;AACA,OAAO,SAASC,cAAT,GAA0B;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAEF,kBADH;;AAEGG,IAAAA,WAAN,CAAkBC,OAAlB,EAA2BC,IAA3B,EAAiC;AAAA;AAC7B,YAAID,OAAO,CAACE,QAAZ,EAAsB;AAClB,gBAAMA,QAAQ,GAAGF,OAAO,CAACE,QAAzB;AACA,gBAAMC,WAAW,GAAG,IAAIC,QAAJ,EAApB;;AACA,eAAK,MAAMC,OAAX,IAAsBC,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAtB,EAA6C;AACzC,kBAAMM,SAAS,GAAGN,QAAQ,CAACG,OAAD,CAA1B;;AACA,gBAAII,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC1B,mBAAK,MAAMG,QAAX,IAAuBH,SAAvB,EAAkC;AAC9BL,gBAAAA,WAAW,CAACS,MAAZ,CAAmBP,OAAnB,EAA4BM,QAA5B;AACH;AACJ,aAJD,MAKK;AACDR,cAAAA,WAAW,CAACS,MAAZ,CAAmBP,OAAnB,EAA4BG,SAA5B;AACH;AACJ;;AACDR,UAAAA,OAAO,CAACa,IAAR,GAAeV,WAAf;AACAH,UAAAA,OAAO,CAACE,QAAR,GAAmBY,SAAnB;AACA,gBAAMC,WAAW,GAAGf,OAAO,CAACgB,OAAR,CAAgBC,GAAhB,CAAoB,cAApB,CAApB;;AACA,cAAIF,WAAW,IAAIA,WAAW,CAACG,OAAZ,CAAoB,mCAApB,MAA6D,CAAC,CAAjF,EAAoF;AAChFlB,YAAAA,OAAO,CAACa,IAAR,GAAe,IAAIM,eAAJ,CAAoBhB,WAApB,EAAiCiB,QAAjC,EAAf;AACH,WAFD,MAGK,IAAIL,WAAW,IAAIA,WAAW,CAACG,OAAZ,CAAoB,qBAApB,MAA+C,CAAC,CAAnE,EAAsE;AACvE;AACAlB,YAAAA,OAAO,CAACgB,OAAR,CAAgBK,MAAhB,CAAuB,cAAvB;AACH;AACJ;;AACD,eAAOpB,IAAI,CAACD,OAAD,CAAX;AA1B6B;AA2BhC;;AA7BE,GAAP;AA+BH","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (request.formData) {\n                const formData = request.formData;\n                const requestForm = new FormData();\n                for (const formKey of Object.keys(formData)) {\n                    const formValue = formData[formKey];\n                    if (Array.isArray(formValue)) {\n                        for (const subValue of formValue) {\n                            requestForm.append(formKey, subValue);\n                        }\n                    }\n                    else {\n                        requestForm.append(formKey, formValue);\n                    }\n                }\n                request.body = requestForm;\n                request.formData = undefined;\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = new URLSearchParams(requestForm).toString();\n                }\n                else if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n                    // browser will automatically apply a suitable content-type header\n                    request.headers.delete(\"Content-Type\");\n                }\n            }\n            return next(request);\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module"}