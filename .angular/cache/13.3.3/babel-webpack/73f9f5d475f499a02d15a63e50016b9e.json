{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  constructor() {\n    /**\n     * Permission to read resources and list queues and tables granted.\n     */\n    this.read = false;\n    /**\n     * Permission to write resources granted.\n     */\n\n    this.write = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n\n    this.delete = false;\n    /**\n     * Permission to delete versions granted.\n     */\n\n    this.deleteVersion = false;\n    /**\n     * Permission to list blob containers, blobs, shares, directories, and files granted.\n     */\n\n    this.list = false;\n    /**\n     * Permission to add messages, table entities, and append to blobs granted.\n     */\n\n    this.add = false;\n    /**\n     * Permission to create blobs and files granted.\n     */\n\n    this.create = false;\n    /**\n     * Permissions to update messages and table entities granted.\n     */\n\n    this.update = false;\n    /**\n     * Permission to get and delete messages granted.\n     */\n\n    this.process = false;\n    /**\n     * Specfies Tag access granted.\n     */\n\n    this.tag = false;\n    /**\n     * Permission to filter blobs.\n     */\n\n    this.filter = false;\n    /**\n     * Permission to set immutability policy.\n     */\n\n    this.setImmutabilityPolicy = false;\n    /**\n     * Specifies that Permanent Delete is permitted.\n     */\n\n    this.permanentDelete = false;\n  }\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n\n\n  static parse(permissions) {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n\n        case \"x\":\n          accountSASPermissions.deleteVersion = true;\n          break;\n\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n\n        case \"t\":\n          accountSASPermissions.tag = true;\n          break;\n\n        case \"f\":\n          accountSASPermissions.filter = true;\n          break;\n\n        case \"i\":\n          accountSASPermissions.setImmutabilityPolicy = true;\n          break;\n\n        case \"y\":\n          accountSASPermissions.permanentDelete = true;\n          break;\n\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n  /**\n   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n   * and boolean values for them.\n   *\n   * @param permissionLike -\n   */\n\n\n  static from(permissionLike) {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    if (permissionLike.read) {\n      accountSASPermissions.read = true;\n    }\n\n    if (permissionLike.write) {\n      accountSASPermissions.write = true;\n    }\n\n    if (permissionLike.delete) {\n      accountSASPermissions.delete = true;\n    }\n\n    if (permissionLike.deleteVersion) {\n      accountSASPermissions.deleteVersion = true;\n    }\n\n    if (permissionLike.filter) {\n      accountSASPermissions.filter = true;\n    }\n\n    if (permissionLike.tag) {\n      accountSASPermissions.tag = true;\n    }\n\n    if (permissionLike.list) {\n      accountSASPermissions.list = true;\n    }\n\n    if (permissionLike.add) {\n      accountSASPermissions.add = true;\n    }\n\n    if (permissionLike.create) {\n      accountSASPermissions.create = true;\n    }\n\n    if (permissionLike.update) {\n      accountSASPermissions.update = true;\n    }\n\n    if (permissionLike.process) {\n      accountSASPermissions.process = true;\n    }\n\n    if (permissionLike.setImmutabilityPolicy) {\n      accountSASPermissions.setImmutabilityPolicy = true;\n    }\n\n    if (permissionLike.permanentDelete) {\n      accountSASPermissions.permanentDelete = true;\n    }\n\n    return accountSASPermissions;\n  }\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n\n\n  toString() {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions = [];\n\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n\n    if (this.deleteVersion) {\n      permissions.push(\"x\");\n    }\n\n    if (this.filter) {\n      permissions.push(\"f\");\n    }\n\n    if (this.tag) {\n      permissions.push(\"t\");\n    }\n\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n\n    if (this.setImmutabilityPolicy) {\n      permissions.push(\"i\");\n    }\n\n    if (this.permanentDelete) {\n      permissions.push(\"y\");\n    }\n\n    return permissions.join(\"\");\n  }\n\n} //# sourceMappingURL=AccountSASPermissions.js.map","map":null,"metadata":{},"sourceType":"module"}