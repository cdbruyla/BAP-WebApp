{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { getDefaultUserAgentKey, getPlatformSpecificData } from \"./msRestUserAgentPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { HttpHeaders } from \"../httpHeaders\";\n\nfunction getRuntimeInfo() {\n  const msRestRuntime = {\n    key: \"core-http\",\n    value: Constants.coreHttpVersion\n  };\n  return [msRestRuntime];\n}\n\nfunction getUserAgentString(telemetryInfo, keySeparator = \" \", valueSeparator = \"/\") {\n  return telemetryInfo.map(info => {\n    const value = info.value ? `${valueSeparator}${info.value}` : \"\";\n    return `${info.key}${value}`;\n  }).join(keySeparator);\n}\n\nexport const getDefaultUserAgentHeaderName = getDefaultUserAgentKey;\n/**\n * The default approach to generate user agents.\n * Uses static information from this package, plus system information available from the runtime.\n */\n\nexport function getDefaultUserAgentValue() {\n  const runtimeInfo = getRuntimeInfo();\n  const platformSpecificData = getPlatformSpecificData();\n  const userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));\n  return userAgent;\n}\n/**\n * Returns a policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n * @param userAgentData - Telemetry information.\n * @returns A new {@link UserAgentPolicy}.\n */\n\nexport function userAgentPolicy(userAgentData) {\n  const key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null ? getDefaultUserAgentKey() : userAgentData.key;\n  const value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null ? getDefaultUserAgentValue() : userAgentData.value;\n  return {\n    create: (nextPolicy, options) => {\n      return new UserAgentPolicy(nextPolicy, options, key, value);\n    }\n  };\n}\n/**\n * A policy that adds the user agent header to outgoing requests based on the given {@link TelemetryInfo}.\n */\n\nexport class UserAgentPolicy extends BaseRequestPolicy {\n  constructor(_nextPolicy, _options, headerKey, headerValue) {\n    super(_nextPolicy, _options);\n    this._nextPolicy = _nextPolicy;\n    this._options = _options;\n    this.headerKey = headerKey;\n    this.headerValue = headerValue;\n  }\n\n  sendRequest(request) {\n    this.addUserAgentHeader(request);\n    return this._nextPolicy.sendRequest(request);\n  }\n  /**\n   * Adds the user agent header to the outgoing request.\n   */\n\n\n  addUserAgentHeader(request) {\n    if (!request.headers) {\n      request.headers = new HttpHeaders();\n    }\n\n    if (!request.headers.get(this.headerKey) && this.headerValue) {\n      request.headers.set(this.headerKey, this.headerValue);\n    }\n  }\n\n} //# sourceMappingURL=userAgentPolicy.js.map","map":null,"metadata":{},"sourceType":"module"}