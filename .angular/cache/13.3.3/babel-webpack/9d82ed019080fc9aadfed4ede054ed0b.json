{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { SpanKind, setSpan, context as otContext, getTracer } from \"./interfaces\";\nimport { trace, INVALID_SPAN_CONTEXT } from \"@opentelemetry/api\";\nexport function isTracingDisabled() {\n  var _a;\n\n  if (typeof process === \"undefined\") {\n    // not supported in browser for now without polyfills\n    return false;\n  }\n\n  const azureTracingDisabledValue = (_a = process.env.AZURE_TRACING_DISABLED) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n\n  if (azureTracingDisabledValue === \"false\" || azureTracingDisabledValue === \"0\") {\n    return false;\n  }\n\n  return Boolean(azureTracingDisabledValue);\n}\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\n\nexport function createSpanFunction(args) {\n  return function (operationName, operationOptions) {\n    const tracer = getTracer();\n    const tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};\n    const spanOptions = Object.assign({\n      kind: SpanKind.INTERNAL\n    }, tracingOptions.spanOptions);\n    const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;\n    let span;\n\n    if (isTracingDisabled()) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else {\n      span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n    }\n\n    if (args.namespace) {\n      span.setAttribute(\"az.namespace\", args.namespace);\n    }\n\n    let newSpanOptions = tracingOptions.spanOptions || {};\n\n    if (span.isRecording() && args.namespace) {\n      newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), {\n        attributes: Object.assign(Object.assign({}, spanOptions.attributes), {\n          \"az.namespace\": args.namespace\n        })\n      });\n    }\n\n    const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), {\n      spanOptions: newSpanOptions,\n      tracingContext: setSpan(tracingOptions.tracingContext || otContext.active(), span)\n    });\n    const newOperationOptions = Object.assign(Object.assign({}, operationOptions), {\n      tracingOptions: newTracingOptions\n    });\n    return {\n      span,\n      updatedOptions: newOperationOptions\n    };\n  };\n} //# sourceMappingURL=createSpan.js.map","map":null,"metadata":{},"sourceType":"module"}