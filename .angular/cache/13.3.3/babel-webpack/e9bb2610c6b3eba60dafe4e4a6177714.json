{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { replaceAll } from \"./util/utils\";\nexport { URL } from \"./util/url\";\n/**\n * A class that handles the query portion of a URLBuilder.\n */\n\nexport class URLQuery {\n  constructor() {\n    this._rawQuery = {};\n  }\n  /**\n   * Get whether or not there any query parameters in this URLQuery.\n   */\n\n\n  any() {\n    return Object.keys(this._rawQuery).length > 0;\n  }\n  /**\n   * Get the keys of the query string.\n   */\n\n\n  keys() {\n    return Object.keys(this._rawQuery);\n  }\n  /**\n   * Set a query parameter with the provided name and value. If the parameterValue is undefined or\n   * empty, then this will attempt to remove an existing query parameter with the provided\n   * parameterName.\n   */\n\n\n  set(parameterName, parameterValue) {\n    const caseParameterValue = parameterValue;\n\n    if (parameterName) {\n      if (caseParameterValue !== undefined && caseParameterValue !== null) {\n        const newValue = Array.isArray(caseParameterValue) ? caseParameterValue : caseParameterValue.toString();\n        this._rawQuery[parameterName] = newValue;\n      } else {\n        delete this._rawQuery[parameterName];\n      }\n    }\n  }\n  /**\n   * Get the value of the query parameter with the provided name. If no parameter exists with the\n   * provided parameter name, then undefined will be returned.\n   */\n\n\n  get(parameterName) {\n    return parameterName ? this._rawQuery[parameterName] : undefined;\n  }\n  /**\n   * Get the string representation of this query. The return value will not start with a \"?\".\n   */\n\n\n  toString() {\n    let result = \"\";\n\n    for (const parameterName in this._rawQuery) {\n      if (result) {\n        result += \"&\";\n      }\n\n      const parameterValue = this._rawQuery[parameterName];\n\n      if (Array.isArray(parameterValue)) {\n        const parameterStrings = [];\n\n        for (const parameterValueElement of parameterValue) {\n          parameterStrings.push(`${parameterName}=${parameterValueElement}`);\n        }\n\n        result += parameterStrings.join(\"&\");\n      } else {\n        result += `${parameterName}=${parameterValue}`;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Parse a URLQuery from the provided text.\n   */\n\n\n  static parse(text) {\n    const result = new URLQuery();\n\n    if (text) {\n      if (text.startsWith(\"?\")) {\n        text = text.substring(1);\n      }\n\n      let currentState = \"ParameterName\";\n      let parameterName = \"\";\n      let parameterValue = \"\";\n\n      for (let i = 0; i < text.length; ++i) {\n        const currentCharacter = text[i];\n\n        switch (currentState) {\n          case \"ParameterName\":\n            switch (currentCharacter) {\n              case \"=\":\n                currentState = \"ParameterValue\";\n                break;\n\n              case \"&\":\n                parameterName = \"\";\n                parameterValue = \"\";\n                break;\n\n              default:\n                parameterName += currentCharacter;\n                break;\n            }\n\n            break;\n\n          case \"ParameterValue\":\n            switch (currentCharacter) {\n              case \"&\":\n                result.set(parameterName, parameterValue);\n                parameterName = \"\";\n                parameterValue = \"\";\n                currentState = \"ParameterName\";\n                break;\n\n              default:\n                parameterValue += currentCharacter;\n                break;\n            }\n\n            break;\n\n          default:\n            throw new Error(\"Unrecognized URLQuery parse state: \" + currentState);\n        }\n      }\n\n      if (currentState === \"ParameterValue\") {\n        result.set(parameterName, parameterValue);\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\n * A class that handles creating, modifying, and parsing URLs.\n */\n\nexport class URLBuilder {\n  /**\n   * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL\n   * (such as a host, port, path, or query), those parts will be added to this URL as well.\n   */\n  setScheme(scheme) {\n    if (!scheme) {\n      this._scheme = undefined;\n    } else {\n      this.set(scheme, \"SCHEME\");\n    }\n  }\n  /**\n   * Get the scheme that has been set in this URL.\n   */\n\n\n  getScheme() {\n    return this._scheme;\n  }\n  /**\n   * Set the host for this URL. If the provided host contains other parts of a URL (such as a\n   * port, path, or query), those parts will be added to this URL as well.\n   */\n\n\n  setHost(host) {\n    if (!host) {\n      this._host = undefined;\n    } else {\n      this.set(host, \"SCHEME_OR_HOST\");\n    }\n  }\n  /**\n   * Get the host that has been set in this URL.\n   */\n\n\n  getHost() {\n    return this._host;\n  }\n  /**\n   * Set the port for this URL. If the provided port contains other parts of a URL (such as a\n   * path or query), those parts will be added to this URL as well.\n   */\n\n\n  setPort(port) {\n    if (port === undefined || port === null || port === \"\") {\n      this._port = undefined;\n    } else {\n      this.set(port.toString(), \"PORT\");\n    }\n  }\n  /**\n   * Get the port that has been set in this URL.\n   */\n\n\n  getPort() {\n    return this._port;\n  }\n  /**\n   * Set the path for this URL. If the provided path contains a query, then it will be added to\n   * this URL as well.\n   */\n\n\n  setPath(path) {\n    if (!path) {\n      this._path = undefined;\n    } else {\n      const schemeIndex = path.indexOf(\"://\");\n\n      if (schemeIndex !== -1) {\n        const schemeStart = path.lastIndexOf(\"/\", schemeIndex); // Make sure to only grab the URL part of the path before setting the state back to SCHEME\n        // this will handle cases such as \"/a/b/c/https://microsoft.com\" => \"https://microsoft.com\"\n\n        this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), \"SCHEME\");\n      } else {\n        this.set(path, \"PATH\");\n      }\n    }\n  }\n  /**\n   * Append the provided path to this URL's existing path. If the provided path contains a query,\n   * then it will be added to this URL as well.\n   */\n\n\n  appendPath(path) {\n    if (path) {\n      let currentPath = this.getPath();\n\n      if (currentPath) {\n        if (!currentPath.endsWith(\"/\")) {\n          currentPath += \"/\";\n        }\n\n        if (path.startsWith(\"/\")) {\n          path = path.substring(1);\n        }\n\n        path = currentPath + path;\n      }\n\n      this.set(path, \"PATH\");\n    }\n  }\n  /**\n   * Get the path that has been set in this URL.\n   */\n\n\n  getPath() {\n    return this._path;\n  }\n  /**\n   * Set the query in this URL.\n   */\n\n\n  setQuery(query) {\n    if (!query) {\n      this._query = undefined;\n    } else {\n      this._query = URLQuery.parse(query);\n    }\n  }\n  /**\n   * Set a query parameter with the provided name and value in this URL's query. If the provided\n   * query parameter value is undefined or empty, then the query parameter will be removed if it\n   * existed.\n   */\n\n\n  setQueryParameter(queryParameterName, queryParameterValue) {\n    if (queryParameterName) {\n      if (!this._query) {\n        this._query = new URLQuery();\n      }\n\n      this._query.set(queryParameterName, queryParameterValue);\n    }\n  }\n  /**\n   * Get the value of the query parameter with the provided query parameter name. If no query\n   * parameter exists with the provided name, then undefined will be returned.\n   */\n\n\n  getQueryParameterValue(queryParameterName) {\n    return this._query ? this._query.get(queryParameterName) : undefined;\n  }\n  /**\n   * Get the query in this URL.\n   */\n\n\n  getQuery() {\n    return this._query ? this._query.toString() : undefined;\n  }\n  /**\n   * Set the parts of this URL by parsing the provided text using the provided startState.\n   */\n\n\n  set(text, startState) {\n    const tokenizer = new URLTokenizer(text, startState);\n\n    while (tokenizer.next()) {\n      const token = tokenizer.current();\n      let tokenPath;\n\n      if (token) {\n        switch (token.type) {\n          case \"SCHEME\":\n            this._scheme = token.text || undefined;\n            break;\n\n          case \"HOST\":\n            this._host = token.text || undefined;\n            break;\n\n          case \"PORT\":\n            this._port = token.text || undefined;\n            break;\n\n          case \"PATH\":\n            tokenPath = token.text || undefined;\n\n            if (!this._path || this._path === \"/\" || tokenPath !== \"/\") {\n              this._path = tokenPath;\n            }\n\n            break;\n\n          case \"QUERY\":\n            this._query = URLQuery.parse(token.text);\n            break;\n\n          default:\n            throw new Error(`Unrecognized URLTokenType: ${token.type}`);\n        }\n      }\n    }\n  }\n  /**\n   * Serializes the URL as a string.\n   * @returns the URL as a string.\n   */\n\n\n  toString() {\n    let result = \"\";\n\n    if (this._scheme) {\n      result += `${this._scheme}://`;\n    }\n\n    if (this._host) {\n      result += this._host;\n    }\n\n    if (this._port) {\n      result += `:${this._port}`;\n    }\n\n    if (this._path) {\n      if (!this._path.startsWith(\"/\")) {\n        result += \"/\";\n      }\n\n      result += this._path;\n    }\n\n    if (this._query && this._query.any()) {\n      result += `?${this._query.toString()}`;\n    }\n\n    return result;\n  }\n  /**\n   * If the provided searchValue is found in this URLBuilder, then replace it with the provided\n   * replaceValue.\n   */\n\n\n  replaceAll(searchValue, replaceValue) {\n    if (searchValue) {\n      this.setScheme(replaceAll(this.getScheme(), searchValue, replaceValue));\n      this.setHost(replaceAll(this.getHost(), searchValue, replaceValue));\n      this.setPort(replaceAll(this.getPort(), searchValue, replaceValue));\n      this.setPath(replaceAll(this.getPath(), searchValue, replaceValue));\n      this.setQuery(replaceAll(this.getQuery(), searchValue, replaceValue));\n    }\n  }\n  /**\n   * Parses a given string URL into a new {@link URLBuilder}.\n   */\n\n\n  static parse(text) {\n    const result = new URLBuilder();\n    result.set(text, \"SCHEME_OR_HOST\");\n    return result;\n  }\n\n}\nexport class URLToken {\n  constructor(text, type) {\n    this.text = text;\n    this.type = type;\n  }\n\n  static scheme(text) {\n    return new URLToken(text, \"SCHEME\");\n  }\n\n  static host(text) {\n    return new URLToken(text, \"HOST\");\n  }\n\n  static port(text) {\n    return new URLToken(text, \"PORT\");\n  }\n\n  static path(text) {\n    return new URLToken(text, \"PATH\");\n  }\n\n  static query(text) {\n    return new URLToken(text, \"QUERY\");\n  }\n\n}\n/**\n * Get whether or not the provided character (single character string) is an alphanumeric (letter or\n * digit) character.\n */\n\nexport function isAlphaNumericCharacter(character) {\n  const characterCode = character.charCodeAt(0);\n  return 48\n  /* '0' */\n  <= characterCode && characterCode <= 57\n  /* '9' */\n  || 65\n  /* 'A' */\n  <= characterCode && characterCode <= 90\n  /* 'Z' */\n  || 97\n  /* 'a' */\n  <= characterCode && characterCode <= 122\n  /* 'z' */\n  ;\n}\n/**\n * A class that tokenizes URL strings.\n */\n\nexport class URLTokenizer {\n  constructor(_text, state) {\n    this._text = _text;\n    this._textLength = _text ? _text.length : 0;\n    this._currentState = state !== undefined && state !== null ? state : \"SCHEME_OR_HOST\";\n    this._currentIndex = 0;\n  }\n  /**\n   * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer\n   * hasn't started or has finished tokenizing.\n   */\n\n\n  current() {\n    return this._currentToken;\n  }\n  /**\n   * Advance to the next URLToken and return whether or not a URLToken was found.\n   */\n\n\n  next() {\n    if (!hasCurrentCharacter(this)) {\n      this._currentToken = undefined;\n    } else {\n      switch (this._currentState) {\n        case \"SCHEME\":\n          nextScheme(this);\n          break;\n\n        case \"SCHEME_OR_HOST\":\n          nextSchemeOrHost(this);\n          break;\n\n        case \"HOST\":\n          nextHost(this);\n          break;\n\n        case \"PORT\":\n          nextPort(this);\n          break;\n\n        case \"PATH\":\n          nextPath(this);\n          break;\n\n        case \"QUERY\":\n          nextQuery(this);\n          break;\n\n        default:\n          throw new Error(`Unrecognized URLTokenizerState: ${this._currentState}`);\n      }\n    }\n\n    return !!this._currentToken;\n  }\n\n}\n/**\n * Read the remaining characters from this Tokenizer's character stream.\n */\n\nfunction readRemaining(tokenizer) {\n  let result = \"\";\n\n  if (tokenizer._currentIndex < tokenizer._textLength) {\n    result = tokenizer._text.substring(tokenizer._currentIndex);\n    tokenizer._currentIndex = tokenizer._textLength;\n  }\n\n  return result;\n}\n/**\n * Whether or not this URLTokenizer has a current character.\n */\n\n\nfunction hasCurrentCharacter(tokenizer) {\n  return tokenizer._currentIndex < tokenizer._textLength;\n}\n/**\n * Get the character in the text string at the current index.\n */\n\n\nfunction getCurrentCharacter(tokenizer) {\n  return tokenizer._text[tokenizer._currentIndex];\n}\n/**\n * Advance to the character in text that is \"step\" characters ahead. If no step value is provided,\n * then step will default to 1.\n */\n\n\nfunction nextCharacter(tokenizer, step) {\n  if (hasCurrentCharacter(tokenizer)) {\n    if (!step) {\n      step = 1;\n    }\n\n    tokenizer._currentIndex += step;\n  }\n}\n/**\n * Starting with the current character, peek \"charactersToPeek\" number of characters ahead in this\n * Tokenizer's stream of characters.\n */\n\n\nfunction peekCharacters(tokenizer, charactersToPeek) {\n  let endIndex = tokenizer._currentIndex + charactersToPeek;\n\n  if (tokenizer._textLength < endIndex) {\n    endIndex = tokenizer._textLength;\n  }\n\n  return tokenizer._text.substring(tokenizer._currentIndex, endIndex);\n}\n/**\n * Read characters from this Tokenizer until the end of the stream or until the provided condition\n * is false when provided the current character.\n */\n\n\nfunction readWhile(tokenizer, condition) {\n  let result = \"\";\n\n  while (hasCurrentCharacter(tokenizer)) {\n    const currentCharacter = getCurrentCharacter(tokenizer);\n\n    if (!condition(currentCharacter)) {\n      break;\n    } else {\n      result += currentCharacter;\n      nextCharacter(tokenizer);\n    }\n  }\n\n  return result;\n}\n/**\n * Read characters from this Tokenizer until a non-alphanumeric character or the end of the\n * character stream is reached.\n */\n\n\nfunction readWhileLetterOrDigit(tokenizer) {\n  return readWhile(tokenizer, character => isAlphaNumericCharacter(character));\n}\n/**\n * Read characters from this Tokenizer until one of the provided terminating characters is read or\n * the end of the character stream is reached.\n */\n\n\nfunction readUntilCharacter(tokenizer, ...terminatingCharacters) {\n  return readWhile(tokenizer, character => terminatingCharacters.indexOf(character) === -1);\n}\n\nfunction nextScheme(tokenizer) {\n  const scheme = readWhileLetterOrDigit(tokenizer);\n  tokenizer._currentToken = URLToken.scheme(scheme);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"HOST\";\n  }\n}\n\nfunction nextSchemeOrHost(tokenizer) {\n  const schemeOrHost = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    if (peekCharacters(tokenizer, 3) === \"://\") {\n      tokenizer._currentToken = URLToken.scheme(schemeOrHost);\n      tokenizer._currentState = \"HOST\";\n    } else {\n      tokenizer._currentToken = URLToken.host(schemeOrHost);\n      tokenizer._currentState = \"PORT\";\n    }\n  } else {\n    tokenizer._currentToken = URLToken.host(schemeOrHost);\n\n    if (getCurrentCharacter(tokenizer) === \"/\") {\n      tokenizer._currentState = \"PATH\";\n    } else {\n      tokenizer._currentState = \"QUERY\";\n    }\n  }\n}\n\nfunction nextHost(tokenizer) {\n  if (peekCharacters(tokenizer, 3) === \"://\") {\n    nextCharacter(tokenizer, 3);\n  }\n\n  const host = readUntilCharacter(tokenizer, \":\", \"/\", \"?\");\n  tokenizer._currentToken = URLToken.host(host);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \":\") {\n    tokenizer._currentState = \"PORT\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPort(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \":\") {\n    nextCharacter(tokenizer);\n  }\n\n  const port = readUntilCharacter(tokenizer, \"/\", \"?\");\n  tokenizer._currentToken = URLToken.port(port);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else if (getCurrentCharacter(tokenizer) === \"/\") {\n    tokenizer._currentState = \"PATH\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextPath(tokenizer) {\n  const path = readUntilCharacter(tokenizer, \"?\");\n  tokenizer._currentToken = URLToken.path(path);\n\n  if (!hasCurrentCharacter(tokenizer)) {\n    tokenizer._currentState = \"DONE\";\n  } else {\n    tokenizer._currentState = \"QUERY\";\n  }\n}\n\nfunction nextQuery(tokenizer) {\n  if (getCurrentCharacter(tokenizer) === \"?\") {\n    nextCharacter(tokenizer);\n  }\n\n  const query = readRemaining(tokenizer);\n  tokenizer._currentToken = URLToken.query(query);\n  tokenizer._currentState = \"DONE\";\n} //# sourceMappingURL=url.js.map","map":null,"metadata":{},"sourceType":"module"}