{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\n/** Class representing a Container. */\n\nexport class Container {\n  /**\n   * Initialize a new instance of the class Container class.\n   * @param client Reference to the service client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * creates a new container under the specified account. If the container with the same name already\n   * exists, the operation fails\n   * @param options The options parameters.\n   */\n\n\n  create(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, createOperationSpec);\n  }\n  /**\n   * returns all user-defined metadata and system properties for the specified container. The data\n   * returned does not include the container's list of blobs\n   * @param options The options parameters.\n   */\n\n\n  getProperties(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getPropertiesOperationSpec);\n  }\n  /**\n   * operation marks the specified container for deletion. The container and any blobs contained within\n   * it are later deleted during garbage collection\n   * @param options The options parameters.\n   */\n\n\n  delete(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, deleteOperationSpec);\n  }\n  /**\n   * operation sets one or more user-defined name-value pairs for the specified container.\n   * @param options The options parameters.\n   */\n\n\n  setMetadata(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setMetadataOperationSpec);\n  }\n  /**\n   * gets the permissions for the specified container. The permissions indicate whether container data\n   * may be accessed publicly.\n   * @param options The options parameters.\n   */\n\n\n  getAccessPolicy(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getAccessPolicyOperationSpec);\n  }\n  /**\n   * sets the permissions for the specified container. The permissions indicate whether blobs in a\n   * container may be accessed publicly.\n   * @param options The options parameters.\n   */\n\n\n  setAccessPolicy(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, setAccessPolicyOperationSpec);\n  }\n  /**\n   * Restores a previously-deleted container.\n   * @param options The options parameters.\n   */\n\n\n  restore(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, restoreOperationSpec);\n  }\n  /**\n   * Renames an existing container.\n   * @param sourceContainerName Required.  Specifies the name of the container to rename.\n   * @param options The options parameters.\n   */\n\n\n  rename(sourceContainerName, options) {\n    const operationArguments = {\n      sourceContainerName,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, renameOperationSpec);\n  }\n  /**\n   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n   * @param contentLength The length of the request.\n   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n\n\n  submitBatch(contentLength, multipartContentType, body, options) {\n    const operationArguments = {\n      contentLength,\n      multipartContentType,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, submitBatchOperationSpec);\n  }\n  /**\n   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n   * search expression.  Filter blobs searches within the given container.\n   * @param options The options parameters.\n   */\n\n\n  filterBlobs(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, filterBlobsOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n\n\n  acquireLease(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, acquireLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n\n\n  releaseLease(leaseId, options) {\n    const operationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, releaseLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n\n\n  renewLease(leaseId, options) {\n    const operationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, renewLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param options The options parameters.\n   */\n\n\n  breakLease(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, breakLeaseOperationSpec);\n  }\n  /**\n   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n   * be 15 to 60 seconds, or can be infinite\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n   *                        (String) for a list of valid GUID string formats.\n   * @param options The options parameters.\n   */\n\n\n  changeLease(leaseId, proposedLeaseId, options) {\n    const operationArguments = {\n      leaseId,\n      proposedLeaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, changeLeaseOperationSpec);\n  }\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param options The options parameters.\n   */\n\n\n  listBlobFlatSegment(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, listBlobFlatSegmentOperationSpec);\n  }\n  /**\n   * [Update] The List Blobs operation returns a list of the blobs under the specified container\n   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n   *                  character or a string.\n   * @param options The options parameters.\n   */\n\n\n  listBlobHierarchySegment(delimiter, options) {\n    const operationArguments = {\n      delimiter,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, listBlobHierarchySegmentOperationSpec);\n  }\n  /**\n   * Returns the sku name and account kind\n   * @param options The options parameters.\n   */\n\n\n  getAccountInfo(options) {\n    const operationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(operationArguments, getAccountInfoOperationSpec);\n  }\n\n} // Operation Specifications\n\nconst xmlSerializer = new coreHttp.Serializer(Mappers,\n/* isXml */\ntrue);\nconst createOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.access, Parameters.defaultEncryptionScope, Parameters.preventEncryptionScopeOverride],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp6],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.metadata, Parameters.leaseId, Parameters.ifModifiedSince],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccessPolicyOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SignedIdentifier\"\n            }\n          }\n        },\n        serializedName: \"SignedIdentifiers\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\"\n      },\n      headersMapper: Mappers.ContainerGetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccessPolicyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.leaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setAccessPolicyOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerSetAccessPolicyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSetAccessPolicyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.containerAcl,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp7],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.access, Parameters.leaseId, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst restoreOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRestoreHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRestoreExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp8],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.deletedContainerName, Parameters.deletedContainerVersion],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renameOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenameHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenameExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp9],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.sourceContainerName, Parameters.sourceLeaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst submitBatchOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: {\n          name: \"Stream\"\n        },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerSubmitBatchHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerSubmitBatchExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp4, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType, Parameters.accept, Parameters.version, Parameters.requestId, Parameters.contentLength, Parameters.multipartContentType],\n  isXML: true,\n  contentType: \"application/xml; charset=utf-8\",\n  mediaType: \"xml\",\n  serializer: xmlSerializer\n};\nconst filterBlobsOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.FilterBlobSegment,\n      headersMapper: Mappers.ContainerFilterBlobsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerFilterBlobsExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.marker, Parameters.maxPageSize, Parameters.comp5, Parameters.where, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action, Parameters.duration, Parameters.proposedLeaseId],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action1, Parameters.leaseId1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst renewLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRenewLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerRenewLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action2],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.action3, Parameters.breakPeriod],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2, Parameters.comp10],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1, Parameters.ifModifiedSince, Parameters.ifUnmodifiedSince, Parameters.leaseId1, Parameters.action4, Parameters.proposedLeaseId1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobFlatSegmentOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsFlatSegmentResponse,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobFlatSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listBlobHierarchySegmentOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerListBlobHierarchySegmentExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2, Parameters.prefix, Parameters.marker, Parameters.maxPageSize, Parameters.restype2, Parameters.include1, Parameters.delimiter],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.requestId, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getAccountInfoOperationSpec = {\n  path: \"/{containerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerGetAccountInfoHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.ContainerGetAccountInfoExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.restype1],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n}; //# sourceMappingURL=container.js.map","map":null,"metadata":{},"sourceType":"module"}