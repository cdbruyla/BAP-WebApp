{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Detects where the continuation token is and returns it. Notice that azure-asyncoperation\n * must be checked first before the other location headers because there are scenarios\n * where both azure-asyncoperation and location could be present in the same response but\n * azure-asyncoperation should be the one to use for polling.\n */\nexport function getPollingUrl(rawResponse, defaultPath) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = getAzureAsyncOperation(rawResponse)) !== null && _a !== void 0 ? _a : getOperationLocation(rawResponse)) !== null && _b !== void 0 ? _b : getLocation(rawResponse)) !== null && _c !== void 0 ? _c : defaultPath;\n}\n\nfunction getLocation(rawResponse) {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocation(rawResponse) {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperation(rawResponse) {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(requestMethod, rawResponse, requestPath) {\n  switch (requestMethod) {\n    case \"PUT\":\n      {\n        return requestPath;\n      }\n\n    case \"POST\":\n    case \"PATCH\":\n      {\n        return getLocation(rawResponse);\n      }\n\n    default:\n      {\n        return undefined;\n      }\n  }\n}\n\nexport function inferLroMode(requestPath, requestMethod, rawResponse) {\n  if (getAzureAsyncOperation(rawResponse) !== undefined || getOperationLocation(rawResponse) !== undefined) {\n    return {\n      mode: \"Location\",\n      resourceLocation: findResourceLocation(requestMethod, rawResponse, requestPath)\n    };\n  } else if (getLocation(rawResponse) !== undefined) {\n    return {\n      mode: \"Location\"\n    };\n  } else if ([\"PUT\", \"PATCH\"].includes(requestMethod)) {\n    return {\n      mode: \"Body\"\n    };\n  }\n\n  return {};\n}\n\nclass SimpleRestError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.name = \"RestError\";\n    this.statusCode = statusCode;\n    Object.setPrototypeOf(this, SimpleRestError.prototype);\n  }\n\n}\n\nexport function isUnexpectedInitialResponse(rawResponse) {\n  const code = rawResponse.statusCode;\n\n  if (![203, 204, 202, 201, 200, 500].includes(code)) {\n    throw new SimpleRestError(`Received unexpected HTTP status code ${code} in the initial response. This may indicate a server issue.`, code);\n  }\n\n  return false;\n}\nexport function isUnexpectedPollingResponse(rawResponse) {\n  const code = rawResponse.statusCode;\n\n  if (![202, 201, 200, 500].includes(code)) {\n    throw new SimpleRestError(`Received unexpected HTTP status code ${code} while polling. This may indicate a server issue.`, code);\n  }\n\n  return false;\n} //# sourceMappingURL=requestUtils.js.map","map":null,"metadata":{},"sourceType":"module"}