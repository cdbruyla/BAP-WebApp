{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\n\nexport let RestError = /*#__PURE__*/(() => {\n  class RestError extends Error {\n    constructor(message, options = {}) {\n      super(message);\n      this.name = \"RestError\";\n      this.code = options.code;\n      this.statusCode = options.statusCode;\n      this.request = options.request;\n      this.response = options.response;\n      Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n\n\n    [custom]() {\n      return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n\n  }\n\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  //# sourceMappingURL=restError.js.map\n  RestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n\n  RestError.PARSE_ERROR = \"PARSE_ERROR\";\n  return RestError;\n})();","map":null,"metadata":{},"sourceType":"module"}